
PT4_NIOSTEST.elf:     file format elf32-littlenios2
PT4_NIOSTEST.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08008230

Program Header:
    LOAD off    0x00001000 vaddr 0x08008000 paddr 0x08008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08008020 paddr 0x08008020 align 2**12
         filesz 0x00001de8 memsz 0x00001de8 flags r-x
    LOAD off    0x00002e08 vaddr 0x08009e08 paddr 0x0800a0ec align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x000033d0 vaddr 0x0800a3d0 paddr 0x0800a3d0 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08008000  08008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08008020  08008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001b94  08008230  08008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  08009dc4  08009dc4  00002dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  08009e08  0800a0ec  00002e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  0800a3d0  0800a3d0  000033d0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0800a4fc  0800a4fc  000030ec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000030ec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005e0  00000000  00000000  00003110  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006eb2  00000000  00000000  000036f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027f8  00000000  00000000  0000a5a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002b0d  00000000  00000000  0000cd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ab0  00000000  00000000  0000f8a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001b69  00000000  00000000  00010358  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006f2  00000000  00000000  00011ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000125b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  000125c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000140fe  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00014101  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00014104  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00014105  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00014106  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001410f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00014118  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00014121  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000061  00000000  00000000  0001412f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004cc6  00000000  00000000  00014190  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005d9a4  00000000  00000000  00018e56  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08008000 l    d  .entry	00000000 .entry
08008020 l    d  .exceptions	00000000 .exceptions
08008230 l    d  .text	00000000 .text
08009dc4 l    d  .rodata	00000000 .rodata
08009e08 l    d  .rwdata	00000000 .rwdata
0800a3d0 l    d  .bss	00000000 .bss
0800a4fc l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PT4_NIOSTEST_bsp//obj/HAL/src/crt0.o
08008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08009e08 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
080084a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0800860c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08008748 l     F .text	00000034 alt_dev_reg
08009ee8 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08008a40 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
08008b34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08008c68 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08008c94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080090f4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08009254 l     F .text	0000003c alt_get_errno
08009290 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800a3f8 g     O .bss	00000004 alt_instruction_exception_handler
08008590 g     F .text	0000007c alt_main
080082e4 g     F .text	00000080 _puts_r
0800a3fc g     O .bss	00000100 alt_irq
0800a0ec g       *ABS*	00000000 __flash_rwdata_start
0800a0bc g     O .rwdata	00000004 testforstupid
08009700 g     F .text	00000024 altera_nios2_gen2_irq_init
08008000 g     F .entry	0000000c __reset
08008020 g       *ABS*	00000000 __flash_exceptions_start
0800a3dc g     O .bss	00000004 errno
0800a3e4 g     O .bss	00000004 alt_argv
080120bc g       *ABS*	00000000 _gp
08009f3c g     O .rwdata	00000180 alt_fd_list
08009724 g     F .text	00000090 alt_find_dev
080091d8 g     F .text	0000007c alt_io_redirect
08009dc4 g       *ABS*	00000000 __DTOR_END__
08008364 g     F .text	00000014 puts
08009980 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080088c0 g     F .text	000000ec altera_avalon_jtag_uart_read
0800a0d8 g     O .rwdata	00000004 alt_max_fd
0800a0c0 g     O .rwdata	00000004 _global_impure_ptr
0800a4fc g       *ABS*	00000000 __bss_end
08009004 g     F .text	000000f0 alt_iic_isr_register
080095f8 g     F .text	00000108 alt_tick
08008fb8 g     F .text	0000004c alt_ic_irq_enabled
0800955c g     F .text	0000009c alt_alarm_stop
0800a3ec g     O .bss	00000004 alt_irq_active
080080fc g     F .exceptions	000000d4 alt_irq_handler
08009f14 g     O .rwdata	00000028 alt_dev_null
08008c48 g     F .text	00000020 alt_dcache_flush_all
0800a0ec g       *ABS*	00000000 __ram_rwdata_end
08008000 g       *ABS*	00000000 __alt_mem_onchip_memory
0800a0d0 g     O .rwdata	00000008 alt_dev_list
08008648 g     F .text	00000100 write
08009e08 g       *ABS*	00000000 __ram_rodata_end
0800a3d0 g     O .bss	00000004 epic
0800a4fc g       *ABS*	00000000 end
080081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08009dc4 g       *ABS*	00000000 __CTOR_LIST__
0800d000 g       *ABS*	00000000 __alt_stack_pointer
08008ab8 g     F .text	0000007c alt_avalon_timer_sc_init
080089ac g     F .text	00000094 altera_avalon_jtag_uart_write
08009bd8 g     F .text	00000190 __call_exitprocs
08008230 g     F .text	0000003c _start
0800a3f0 g     O .bss	00000004 _alt_tick_rate
0800a3f4 g     O .bss	00000004 _alt_nticks
080087b4 g     F .text	0000004c alt_sys_init
08009a80 g     F .text	00000158 __register_exitproc
08009d68 g     F .text	00000028 .hidden __mulsi3
08009e08 g       *ABS*	00000000 __ram_rwdata_start
08009dc4 g       *ABS*	00000000 __ram_rodata_start
08008800 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080098bc g     F .text	000000c4 alt_get_fd
08009a50 g     F .text	00000030 memcmp
0800a4fc g       *ABS*	00000000 __alt_stack_base
080097b4 g     F .text	00000108 alt_find_file
08008cd0 g     F .text	000000a4 alt_dev_llist_insert
08008394 g     F .text	000000b8 __sfvwrite_small_dev
0800a3d0 g       *ABS*	00000000 __bss_start
0800826c g     F .text	00000078 main
0800a3e8 g     O .bss	00000004 alt_envp
08008860 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800a0dc g     O .rwdata	00000004 alt_errno
08009dc4 g       *ABS*	00000000 __CTOR_END__
08009dc4 g       *ABS*	00000000 __flash_rodata_start
08009dc4 g       *ABS*	00000000 __DTOR_LIST__
0800a3d8 g     O .bss	00000004 count
0800877c g     F .text	00000038 alt_irq_init
080094d8 g     F .text	00000084 alt_release_fd
08009a1c g     F .text	00000014 atexit
0800844c g     F .text	00000058 _write_r
0800a0c4 g     O .rwdata	00000004 _impure_ptr
0800a3e0 g     O .bss	00000004 alt_argc
08008dd4 g     F .text	00000060 _do_dtors
08008020 g       .exceptions	00000000 alt_irq_entry
0800a0c8 g     O .rwdata	00000008 alt_fs_list
08008020 g       *ABS*	00000000 __ram_exceptions_start
08008e54 g     F .text	00000050 alt_ic_isr_register
0800a0ec g       *ABS*	00000000 _edata
0800a4fc g       *ABS*	00000000 _end
08008230 g       *ABS*	00000000 __ram_exceptions_end
08008f2c g     F .text	0000008c alt_ic_irq_disable
0800a3d4 g     O .bss	00000004 ledflashstate
08009a30 g     F .text	00000020 exit
0800d000 g       *ABS*	00000000 __alt_data_end
08008020 g     F .exceptions	00000000 alt_exception
08009d90 g     F .text	00000034 _exit
08008378 g     F .text	0000001c strlen
0800937c g     F .text	0000015c open
08008e34 g     F .text	00000020 alt_icache_flush_all
0800a0e0 g     O .rwdata	00000004 alt_priority_mask
08008ea4 g     F .text	00000088 alt_ic_irq_enable
0800a0e4 g     O .rwdata	00000008 alt_alarm_list
08008d74 g     F .text	00000060 _do_ctors
08008b70 g     F .text	000000d8 close
0800850c g     F .text	00000084 alt_load



Disassembly of section .entry:

08008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8008000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8008004:	08608c14 	ori	at,at,33328
    jmp r1
 8008008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8008020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8008024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8008028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8008030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8008034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8008038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8008040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8008044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8008048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8008050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8008054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8008058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8008060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8008064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8008068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8008070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8008074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8008078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800807c:	10000326 	beq	r2,zero,800808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8008080:	20000226 	beq	r4,zero,800808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8008084:	80080fc0 	call	80080fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8008088:	00000706 	br	80080a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8008090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8008094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8008098:	80081d00 	call	80081d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800809c:	1000021e 	bne	r2,zero,80080a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80080a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80080a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80080a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80080ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80080b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80080b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80080b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80080bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80080c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80080c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80080c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80080cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80080d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80080d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80080d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80080dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80080e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80080e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80080e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80080ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80080f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80080f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80080f8:	ef80083a 	eret

080080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80080fc:	defff904 	addi	sp,sp,-28
 8008100:	dfc00615 	stw	ra,24(sp)
 8008104:	df000515 	stw	fp,20(sp)
 8008108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8008110:	0005313a 	rdctl	r2,ipending
 8008114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8008118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8008120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8008124:	00800044 	movi	r2,1
 8008128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800812c:	e0fffb17 	ldw	r3,-20(fp)
 8008130:	e0bffc17 	ldw	r2,-16(fp)
 8008134:	1884703a 	and	r2,r3,r2
 8008138:	10001426 	beq	r2,zero,800818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800813c:	00820074 	movhi	r2,2049
 8008140:	10a8ff04 	addi	r2,r2,-23556
 8008144:	e0fffd17 	ldw	r3,-12(fp)
 8008148:	180690fa 	slli	r3,r3,3
 800814c:	10c5883a 	add	r2,r2,r3
 8008150:	10c00017 	ldw	r3,0(r2)
 8008154:	00820074 	movhi	r2,2049
 8008158:	10a8ff04 	addi	r2,r2,-23556
 800815c:	e13ffd17 	ldw	r4,-12(fp)
 8008160:	200890fa 	slli	r4,r4,3
 8008164:	1105883a 	add	r2,r2,r4
 8008168:	10800104 	addi	r2,r2,4
 800816c:	10800017 	ldw	r2,0(r2)
 8008170:	1009883a 	mov	r4,r2
 8008174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8008178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800817c:	0005313a 	rdctl	r2,ipending
 8008180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8008184:	e0bfff17 	ldw	r2,-4(fp)
 8008188:	00000706 	br	80081a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800818c:	e0bffc17 	ldw	r2,-16(fp)
 8008190:	1085883a 	add	r2,r2,r2
 8008194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8008198:	e0bffd17 	ldw	r2,-12(fp)
 800819c:	10800044 	addi	r2,r2,1
 80081a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80081a4:	003fe106 	br	800812c <_gp+0xffff6070>

    active = alt_irq_pending ();
 80081a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80081ac:	e0bffb17 	ldw	r2,-20(fp)
 80081b0:	103fdb1e 	bne	r2,zero,8008120 <_gp+0xffff6064>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80081b4:	0001883a 	nop
}
 80081b8:	0001883a 	nop
 80081bc:	e037883a 	mov	sp,fp
 80081c0:	dfc00117 	ldw	ra,4(sp)
 80081c4:	df000017 	ldw	fp,0(sp)
 80081c8:	dec00204 	addi	sp,sp,8
 80081cc:	f800283a 	ret

080081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80081d0:	defffb04 	addi	sp,sp,-20
 80081d4:	dfc00415 	stw	ra,16(sp)
 80081d8:	df000315 	stw	fp,12(sp)
 80081dc:	df000304 	addi	fp,sp,12
 80081e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80081e4:	00bfffc4 	movi	r2,-1
 80081e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80081ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80081f0:	d0a0cf17 	ldw	r2,-31940(gp)
 80081f4:	10000726 	beq	r2,zero,8008214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80081f8:	d0a0cf17 	ldw	r2,-31940(gp)
 80081fc:	e0fffd17 	ldw	r3,-12(fp)
 8008200:	e1bffe17 	ldw	r6,-8(fp)
 8008204:	e17fff17 	ldw	r5,-4(fp)
 8008208:	1809883a 	mov	r4,r3
 800820c:	103ee83a 	callr	r2
 8008210:	00000206 	br	800821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8008214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8008218:	0005883a 	mov	r2,zero
}
 800821c:	e037883a 	mov	sp,fp
 8008220:	dfc00117 	ldw	ra,4(sp)
 8008224:	df000017 	ldw	fp,0(sp)
 8008228:	dec00204 	addi	sp,sp,8
 800822c:	f800283a 	ret

Disassembly of section .text:

08008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8008230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 8008234:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
 8008238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800823c:	d6882f14 	ori	gp,gp,8380
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8008240:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8008244:	10a8f414 	ori	r2,r2,41936

    movhi r3, %hi(__bss_end)
 8008248:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800824c:	18e93f14 	ori	r3,r3,42236

    beq r2, r3, 1f
 8008250:	10c00326 	beq	r2,r3,8008260 <_start+0x30>

0:
    stw zero, (r2)
 8008254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8008258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800825c:	10fffd36 	bltu	r2,r3,8008254 <_gp+0xffff6198>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8008260:	800850c0 	call	800850c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8008264:	80085900 	call	8008590 <alt_main>

08008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8008268:	003fff06 	br	8008268 <_gp+0xffff61ac>

0800826c <main>:

int ledflashstate = 0;
int count = 0;

int main()
{
 800826c:	defffe04 	addi	sp,sp,-8
 8008270:	dfc00115 	stw	ra,4(sp)
 8008274:	df000015 	stw	fp,0(sp)
 8008278:	d839883a 	mov	fp,sp
	while(1){

		if (count >= 10000){
 800827c:	d0a0c717 	ldw	r2,-31972(gp)
 8008280:	1089c410 	cmplti	r2,r2,10000
 8008284:	1000131e 	bne	r2,zero,80082d4 <main+0x68>
		  printf("Hello from Nios II!\n");
 8008288:	01020074 	movhi	r4,2049
 800828c:	21277104 	addi	r4,r4,-25148
 8008290:	80083640 	call	8008364 <puts>

			IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, ledflashstate);
 8008294:	d0e0c617 	ldw	r3,-31976(gp)
 8008298:	00820074 	movhi	r2,2049
 800829c:	10842004 	addi	r2,r2,4224
 80082a0:	10c00035 	stwio	r3,0(r2)
			ledflashstate = !ledflashstate;
 80082a4:	d0a0c617 	ldw	r2,-31976(gp)
 80082a8:	1005003a 	cmpeq	r2,r2,zero
 80082ac:	10803fcc 	andi	r2,r2,255
 80082b0:	d0a0c615 	stw	r2,-31976(gp)

		  epic = testforstupid;
 80082b4:	d0a00017 	ldw	r2,-32768(gp)
 80082b8:	d0a0c515 	stw	r2,-31980(gp)
		  testforstupid = testforstupid + epic;
 80082bc:	d0e00017 	ldw	r3,-32768(gp)
 80082c0:	d0a0c517 	ldw	r2,-31980(gp)
 80082c4:	1885883a 	add	r2,r3,r2
 80082c8:	d0a00015 	stw	r2,-32768(gp)
		  count = 0;
 80082cc:	d020c715 	stw	zero,-31972(gp)
 80082d0:	003fea06 	br	800827c <_gp+0xffff61c0>
		}else{
			count = count + 1;
 80082d4:	d0a0c717 	ldw	r2,-31972(gp)
 80082d8:	10800044 	addi	r2,r2,1
 80082dc:	d0a0c715 	stw	r2,-31972(gp)
		}

	}
 80082e0:	003fe606 	br	800827c <_gp+0xffff61c0>

080082e4 <_puts_r>:
 80082e4:	defffd04 	addi	sp,sp,-12
 80082e8:	dc000015 	stw	r16,0(sp)
 80082ec:	2021883a 	mov	r16,r4
 80082f0:	2809883a 	mov	r4,r5
 80082f4:	dfc00215 	stw	ra,8(sp)
 80082f8:	dc400115 	stw	r17,4(sp)
 80082fc:	2823883a 	mov	r17,r5
 8008300:	80083780 	call	8008378 <strlen>
 8008304:	81400217 	ldw	r5,8(r16)
 8008308:	01020074 	movhi	r4,2049
 800830c:	2120e504 	addi	r4,r4,-31852
 8008310:	29000115 	stw	r4,4(r5)
 8008314:	100f883a 	mov	r7,r2
 8008318:	880d883a 	mov	r6,r17
 800831c:	8009883a 	mov	r4,r16
 8008320:	80083940 	call	8008394 <__sfvwrite_small_dev>
 8008324:	00ffffc4 	movi	r3,-1
 8008328:	10c00926 	beq	r2,r3,8008350 <_puts_r+0x6c>
 800832c:	81400217 	ldw	r5,8(r16)
 8008330:	01820074 	movhi	r6,2049
 8008334:	01c00044 	movi	r7,1
 8008338:	28800117 	ldw	r2,4(r5)
 800833c:	31a77604 	addi	r6,r6,-25128
 8008340:	8009883a 	mov	r4,r16
 8008344:	103ee83a 	callr	r2
 8008348:	10bfffe0 	cmpeqi	r2,r2,-1
 800834c:	0085c83a 	sub	r2,zero,r2
 8008350:	dfc00217 	ldw	ra,8(sp)
 8008354:	dc400117 	ldw	r17,4(sp)
 8008358:	dc000017 	ldw	r16,0(sp)
 800835c:	dec00304 	addi	sp,sp,12
 8008360:	f800283a 	ret

08008364 <puts>:
 8008364:	00820074 	movhi	r2,2049
 8008368:	10a83104 	addi	r2,r2,-24380
 800836c:	200b883a 	mov	r5,r4
 8008370:	11000017 	ldw	r4,0(r2)
 8008374:	80082e41 	jmpi	80082e4 <_puts_r>

08008378 <strlen>:
 8008378:	2005883a 	mov	r2,r4
 800837c:	10c00007 	ldb	r3,0(r2)
 8008380:	18000226 	beq	r3,zero,800838c <strlen+0x14>
 8008384:	10800044 	addi	r2,r2,1
 8008388:	003ffc06 	br	800837c <_gp+0xffff62c0>
 800838c:	1105c83a 	sub	r2,r2,r4
 8008390:	f800283a 	ret

08008394 <__sfvwrite_small_dev>:
 8008394:	2880000b 	ldhu	r2,0(r5)
 8008398:	1080020c 	andi	r2,r2,8
 800839c:	10002126 	beq	r2,zero,8008424 <__sfvwrite_small_dev+0x90>
 80083a0:	2880008f 	ldh	r2,2(r5)
 80083a4:	defffa04 	addi	sp,sp,-24
 80083a8:	dc000015 	stw	r16,0(sp)
 80083ac:	dfc00515 	stw	ra,20(sp)
 80083b0:	dd000415 	stw	r20,16(sp)
 80083b4:	dcc00315 	stw	r19,12(sp)
 80083b8:	dc800215 	stw	r18,8(sp)
 80083bc:	dc400115 	stw	r17,4(sp)
 80083c0:	2821883a 	mov	r16,r5
 80083c4:	10001216 	blt	r2,zero,8008410 <__sfvwrite_small_dev+0x7c>
 80083c8:	2027883a 	mov	r19,r4
 80083cc:	3025883a 	mov	r18,r6
 80083d0:	3823883a 	mov	r17,r7
 80083d4:	05010004 	movi	r20,1024
 80083d8:	04400b0e 	bge	zero,r17,8008408 <__sfvwrite_small_dev+0x74>
 80083dc:	880f883a 	mov	r7,r17
 80083e0:	a440010e 	bge	r20,r17,80083e8 <__sfvwrite_small_dev+0x54>
 80083e4:	01c10004 	movi	r7,1024
 80083e8:	8140008f 	ldh	r5,2(r16)
 80083ec:	900d883a 	mov	r6,r18
 80083f0:	9809883a 	mov	r4,r19
 80083f4:	800844c0 	call	800844c <_write_r>
 80083f8:	0080050e 	bge	zero,r2,8008410 <__sfvwrite_small_dev+0x7c>
 80083fc:	88a3c83a 	sub	r17,r17,r2
 8008400:	90a5883a 	add	r18,r18,r2
 8008404:	003ff406 	br	80083d8 <_gp+0xffff631c>
 8008408:	0005883a 	mov	r2,zero
 800840c:	00000706 	br	800842c <__sfvwrite_small_dev+0x98>
 8008410:	8080000b 	ldhu	r2,0(r16)
 8008414:	10801014 	ori	r2,r2,64
 8008418:	8080000d 	sth	r2,0(r16)
 800841c:	00bfffc4 	movi	r2,-1
 8008420:	00000206 	br	800842c <__sfvwrite_small_dev+0x98>
 8008424:	00bfffc4 	movi	r2,-1
 8008428:	f800283a 	ret
 800842c:	dfc00517 	ldw	ra,20(sp)
 8008430:	dd000417 	ldw	r20,16(sp)
 8008434:	dcc00317 	ldw	r19,12(sp)
 8008438:	dc800217 	ldw	r18,8(sp)
 800843c:	dc400117 	ldw	r17,4(sp)
 8008440:	dc000017 	ldw	r16,0(sp)
 8008444:	dec00604 	addi	sp,sp,24
 8008448:	f800283a 	ret

0800844c <_write_r>:
 800844c:	defffd04 	addi	sp,sp,-12
 8008450:	dc000015 	stw	r16,0(sp)
 8008454:	04020074 	movhi	r16,2049
 8008458:	dc400115 	stw	r17,4(sp)
 800845c:	8428f704 	addi	r16,r16,-23588
 8008460:	2023883a 	mov	r17,r4
 8008464:	2809883a 	mov	r4,r5
 8008468:	300b883a 	mov	r5,r6
 800846c:	380d883a 	mov	r6,r7
 8008470:	dfc00215 	stw	ra,8(sp)
 8008474:	80000015 	stw	zero,0(r16)
 8008478:	80086480 	call	8008648 <write>
 800847c:	00ffffc4 	movi	r3,-1
 8008480:	10c0031e 	bne	r2,r3,8008490 <_write_r+0x44>
 8008484:	80c00017 	ldw	r3,0(r16)
 8008488:	18000126 	beq	r3,zero,8008490 <_write_r+0x44>
 800848c:	88c00015 	stw	r3,0(r17)
 8008490:	dfc00217 	ldw	ra,8(sp)
 8008494:	dc400117 	ldw	r17,4(sp)
 8008498:	dc000017 	ldw	r16,0(sp)
 800849c:	dec00304 	addi	sp,sp,12
 80084a0:	f800283a 	ret

080084a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80084a4:	defffc04 	addi	sp,sp,-16
 80084a8:	df000315 	stw	fp,12(sp)
 80084ac:	df000304 	addi	fp,sp,12
 80084b0:	e13ffd15 	stw	r4,-12(fp)
 80084b4:	e17ffe15 	stw	r5,-8(fp)
 80084b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80084bc:	e0fffe17 	ldw	r3,-8(fp)
 80084c0:	e0bffd17 	ldw	r2,-12(fp)
 80084c4:	18800c26 	beq	r3,r2,80084f8 <alt_load_section+0x54>
  {
    while( to != end )
 80084c8:	00000806 	br	80084ec <alt_load_section+0x48>
    {
      *to++ = *from++;
 80084cc:	e0bffe17 	ldw	r2,-8(fp)
 80084d0:	10c00104 	addi	r3,r2,4
 80084d4:	e0fffe15 	stw	r3,-8(fp)
 80084d8:	e0fffd17 	ldw	r3,-12(fp)
 80084dc:	19000104 	addi	r4,r3,4
 80084e0:	e13ffd15 	stw	r4,-12(fp)
 80084e4:	18c00017 	ldw	r3,0(r3)
 80084e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80084ec:	e0fffe17 	ldw	r3,-8(fp)
 80084f0:	e0bfff17 	ldw	r2,-4(fp)
 80084f4:	18bff51e 	bne	r3,r2,80084cc <_gp+0xffff6410>
    {
      *to++ = *from++;
    }
  }
}
 80084f8:	0001883a 	nop
 80084fc:	e037883a 	mov	sp,fp
 8008500:	df000017 	ldw	fp,0(sp)
 8008504:	dec00104 	addi	sp,sp,4
 8008508:	f800283a 	ret

0800850c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800850c:	defffe04 	addi	sp,sp,-8
 8008510:	dfc00115 	stw	ra,4(sp)
 8008514:	df000015 	stw	fp,0(sp)
 8008518:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800851c:	01820074 	movhi	r6,2049
 8008520:	31a83b04 	addi	r6,r6,-24340
 8008524:	01420074 	movhi	r5,2049
 8008528:	29678204 	addi	r5,r5,-25080
 800852c:	01020074 	movhi	r4,2049
 8008530:	21283b04 	addi	r4,r4,-24340
 8008534:	80084a40 	call	80084a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8008538:	01820074 	movhi	r6,2049
 800853c:	31a08c04 	addi	r6,r6,-32208
 8008540:	01420074 	movhi	r5,2049
 8008544:	29600804 	addi	r5,r5,-32736
 8008548:	01020074 	movhi	r4,2049
 800854c:	21200804 	addi	r4,r4,-32736
 8008550:	80084a40 	call	80084a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8008554:	01820074 	movhi	r6,2049
 8008558:	31a78204 	addi	r6,r6,-25080
 800855c:	01420074 	movhi	r5,2049
 8008560:	29677104 	addi	r5,r5,-25148
 8008564:	01020074 	movhi	r4,2049
 8008568:	21277104 	addi	r4,r4,-25148
 800856c:	80084a40 	call	80084a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8008570:	8008c480 	call	8008c48 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8008574:	8008e340 	call	8008e34 <alt_icache_flush_all>
}
 8008578:	0001883a 	nop
 800857c:	e037883a 	mov	sp,fp
 8008580:	dfc00117 	ldw	ra,4(sp)
 8008584:	df000017 	ldw	fp,0(sp)
 8008588:	dec00204 	addi	sp,sp,8
 800858c:	f800283a 	ret

08008590 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8008590:	defffd04 	addi	sp,sp,-12
 8008594:	dfc00215 	stw	ra,8(sp)
 8008598:	df000115 	stw	fp,4(sp)
 800859c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80085a0:	0009883a 	mov	r4,zero
 80085a4:	800877c0 	call	800877c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80085a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80085ac:	80087b40 	call	80087b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80085b0:	01820074 	movhi	r6,2049
 80085b4:	31a77704 	addi	r6,r6,-25124
 80085b8:	01420074 	movhi	r5,2049
 80085bc:	29677704 	addi	r5,r5,-25124
 80085c0:	01020074 	movhi	r4,2049
 80085c4:	21277704 	addi	r4,r4,-25124
 80085c8:	80091d80 	call	80091d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80085cc:	8008d740 	call	8008d74 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80085d0:	01020074 	movhi	r4,2049
 80085d4:	21237504 	addi	r4,r4,-29228
 80085d8:	8009a1c0 	call	8009a1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80085dc:	d0a0c917 	ldw	r2,-31964(gp)
 80085e0:	d0e0ca17 	ldw	r3,-31960(gp)
 80085e4:	d120cb17 	ldw	r4,-31956(gp)
 80085e8:	200d883a 	mov	r6,r4
 80085ec:	180b883a 	mov	r5,r3
 80085f0:	1009883a 	mov	r4,r2
 80085f4:	800826c0 	call	800826c <main>
 80085f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80085fc:	01000044 	movi	r4,1
 8008600:	8008b700 	call	8008b70 <close>
  exit (result);
 8008604:	e13fff17 	ldw	r4,-4(fp)
 8008608:	8009a300 	call	8009a30 <exit>

0800860c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800860c:	defffe04 	addi	sp,sp,-8
 8008610:	dfc00115 	stw	ra,4(sp)
 8008614:	df000015 	stw	fp,0(sp)
 8008618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800861c:	d0a00817 	ldw	r2,-32736(gp)
 8008620:	10000326 	beq	r2,zero,8008630 <alt_get_errno+0x24>
 8008624:	d0a00817 	ldw	r2,-32736(gp)
 8008628:	103ee83a 	callr	r2
 800862c:	00000106 	br	8008634 <alt_get_errno+0x28>
 8008630:	d0a0c804 	addi	r2,gp,-31968
}
 8008634:	e037883a 	mov	sp,fp
 8008638:	dfc00117 	ldw	ra,4(sp)
 800863c:	df000017 	ldw	fp,0(sp)
 8008640:	dec00204 	addi	sp,sp,8
 8008644:	f800283a 	ret

08008648 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8008648:	defff904 	addi	sp,sp,-28
 800864c:	dfc00615 	stw	ra,24(sp)
 8008650:	df000515 	stw	fp,20(sp)
 8008654:	df000504 	addi	fp,sp,20
 8008658:	e13ffd15 	stw	r4,-12(fp)
 800865c:	e17ffe15 	stw	r5,-8(fp)
 8008660:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8008664:	e0bffd17 	ldw	r2,-12(fp)
 8008668:	10000816 	blt	r2,zero,800868c <write+0x44>
 800866c:	01400304 	movi	r5,12
 8008670:	e13ffd17 	ldw	r4,-12(fp)
 8008674:	8009d680 	call	8009d68 <__mulsi3>
 8008678:	1007883a 	mov	r3,r2
 800867c:	00820074 	movhi	r2,2049
 8008680:	10a7cf04 	addi	r2,r2,-24772
 8008684:	1885883a 	add	r2,r3,r2
 8008688:	00000106 	br	8008690 <write+0x48>
 800868c:	0005883a 	mov	r2,zero
 8008690:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8008694:	e0bffb17 	ldw	r2,-20(fp)
 8008698:	10002126 	beq	r2,zero,8008720 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800869c:	e0bffb17 	ldw	r2,-20(fp)
 80086a0:	10800217 	ldw	r2,8(r2)
 80086a4:	108000cc 	andi	r2,r2,3
 80086a8:	10001826 	beq	r2,zero,800870c <write+0xc4>
 80086ac:	e0bffb17 	ldw	r2,-20(fp)
 80086b0:	10800017 	ldw	r2,0(r2)
 80086b4:	10800617 	ldw	r2,24(r2)
 80086b8:	10001426 	beq	r2,zero,800870c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80086bc:	e0bffb17 	ldw	r2,-20(fp)
 80086c0:	10800017 	ldw	r2,0(r2)
 80086c4:	10800617 	ldw	r2,24(r2)
 80086c8:	e0ffff17 	ldw	r3,-4(fp)
 80086cc:	180d883a 	mov	r6,r3
 80086d0:	e17ffe17 	ldw	r5,-8(fp)
 80086d4:	e13ffb17 	ldw	r4,-20(fp)
 80086d8:	103ee83a 	callr	r2
 80086dc:	e0bffc15 	stw	r2,-16(fp)
 80086e0:	e0bffc17 	ldw	r2,-16(fp)
 80086e4:	1000070e 	bge	r2,zero,8008704 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 80086e8:	800860c0 	call	800860c <alt_get_errno>
 80086ec:	1007883a 	mov	r3,r2
 80086f0:	e0bffc17 	ldw	r2,-16(fp)
 80086f4:	0085c83a 	sub	r2,zero,r2
 80086f8:	18800015 	stw	r2,0(r3)
        return -1;
 80086fc:	00bfffc4 	movi	r2,-1
 8008700:	00000c06 	br	8008734 <write+0xec>
      }
      return rval;
 8008704:	e0bffc17 	ldw	r2,-16(fp)
 8008708:	00000a06 	br	8008734 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800870c:	800860c0 	call	800860c <alt_get_errno>
 8008710:	1007883a 	mov	r3,r2
 8008714:	00800344 	movi	r2,13
 8008718:	18800015 	stw	r2,0(r3)
 800871c:	00000406 	br	8008730 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8008720:	800860c0 	call	800860c <alt_get_errno>
 8008724:	1007883a 	mov	r3,r2
 8008728:	00801444 	movi	r2,81
 800872c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8008730:	00bfffc4 	movi	r2,-1
}
 8008734:	e037883a 	mov	sp,fp
 8008738:	dfc00117 	ldw	ra,4(sp)
 800873c:	df000017 	ldw	fp,0(sp)
 8008740:	dec00204 	addi	sp,sp,8
 8008744:	f800283a 	ret

08008748 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8008748:	defffd04 	addi	sp,sp,-12
 800874c:	dfc00215 	stw	ra,8(sp)
 8008750:	df000115 	stw	fp,4(sp)
 8008754:	df000104 	addi	fp,sp,4
 8008758:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800875c:	d1600504 	addi	r5,gp,-32748
 8008760:	e13fff17 	ldw	r4,-4(fp)
 8008764:	8008cd00 	call	8008cd0 <alt_dev_llist_insert>
}
 8008768:	e037883a 	mov	sp,fp
 800876c:	dfc00117 	ldw	ra,4(sp)
 8008770:	df000017 	ldw	fp,0(sp)
 8008774:	dec00204 	addi	sp,sp,8
 8008778:	f800283a 	ret

0800877c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800877c:	defffd04 	addi	sp,sp,-12
 8008780:	dfc00215 	stw	ra,8(sp)
 8008784:	df000115 	stw	fp,4(sp)
 8008788:	df000104 	addi	fp,sp,4
 800878c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 8008790:	80097000 	call	8009700 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8008794:	00800044 	movi	r2,1
 8008798:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800879c:	0001883a 	nop
 80087a0:	e037883a 	mov	sp,fp
 80087a4:	dfc00117 	ldw	ra,4(sp)
 80087a8:	df000017 	ldw	fp,0(sp)
 80087ac:	dec00204 	addi	sp,sp,8
 80087b0:	f800283a 	ret

080087b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80087b4:	defffe04 	addi	sp,sp,-8
 80087b8:	dfc00115 	stw	ra,4(sp)
 80087bc:	df000015 	stw	fp,0(sp)
 80087c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
 80087c4:	01c0fa04 	movi	r7,1000
 80087c8:	000d883a 	mov	r6,zero
 80087cc:	000b883a 	mov	r5,zero
 80087d0:	01020074 	movhi	r4,2049
 80087d4:	21040004 	addi	r4,r4,4096
 80087d8:	8008ab80 	call	8008ab8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 80087dc:	01020074 	movhi	r4,2049
 80087e0:	2127ba04 	addi	r4,r4,-24856
 80087e4:	80087480 	call	8008748 <alt_dev_reg>
}
 80087e8:	0001883a 	nop
 80087ec:	e037883a 	mov	sp,fp
 80087f0:	dfc00117 	ldw	ra,4(sp)
 80087f4:	df000017 	ldw	fp,0(sp)
 80087f8:	dec00204 	addi	sp,sp,8
 80087fc:	f800283a 	ret

08008800 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8008800:	defffa04 	addi	sp,sp,-24
 8008804:	dfc00515 	stw	ra,20(sp)
 8008808:	df000415 	stw	fp,16(sp)
 800880c:	df000404 	addi	fp,sp,16
 8008810:	e13ffd15 	stw	r4,-12(fp)
 8008814:	e17ffe15 	stw	r5,-8(fp)
 8008818:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800881c:	e0bffd17 	ldw	r2,-12(fp)
 8008820:	10800017 	ldw	r2,0(r2)
 8008824:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8008828:	e0bffc17 	ldw	r2,-16(fp)
 800882c:	10c00a04 	addi	r3,r2,40
 8008830:	e0bffd17 	ldw	r2,-12(fp)
 8008834:	10800217 	ldw	r2,8(r2)
 8008838:	100f883a 	mov	r7,r2
 800883c:	e1bfff17 	ldw	r6,-4(fp)
 8008840:	e17ffe17 	ldw	r5,-8(fp)
 8008844:	1809883a 	mov	r4,r3
 8008848:	80088c00 	call	80088c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800884c:	e037883a 	mov	sp,fp
 8008850:	dfc00117 	ldw	ra,4(sp)
 8008854:	df000017 	ldw	fp,0(sp)
 8008858:	dec00204 	addi	sp,sp,8
 800885c:	f800283a 	ret

08008860 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8008860:	defffa04 	addi	sp,sp,-24
 8008864:	dfc00515 	stw	ra,20(sp)
 8008868:	df000415 	stw	fp,16(sp)
 800886c:	df000404 	addi	fp,sp,16
 8008870:	e13ffd15 	stw	r4,-12(fp)
 8008874:	e17ffe15 	stw	r5,-8(fp)
 8008878:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800887c:	e0bffd17 	ldw	r2,-12(fp)
 8008880:	10800017 	ldw	r2,0(r2)
 8008884:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8008888:	e0bffc17 	ldw	r2,-16(fp)
 800888c:	10c00a04 	addi	r3,r2,40
 8008890:	e0bffd17 	ldw	r2,-12(fp)
 8008894:	10800217 	ldw	r2,8(r2)
 8008898:	100f883a 	mov	r7,r2
 800889c:	e1bfff17 	ldw	r6,-4(fp)
 80088a0:	e17ffe17 	ldw	r5,-8(fp)
 80088a4:	1809883a 	mov	r4,r3
 80088a8:	80089ac0 	call	80089ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80088ac:	e037883a 	mov	sp,fp
 80088b0:	dfc00117 	ldw	ra,4(sp)
 80088b4:	df000017 	ldw	fp,0(sp)
 80088b8:	dec00204 	addi	sp,sp,8
 80088bc:	f800283a 	ret

080088c0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 80088c0:	defff704 	addi	sp,sp,-36
 80088c4:	df000815 	stw	fp,32(sp)
 80088c8:	df000804 	addi	fp,sp,32
 80088cc:	e13ffc15 	stw	r4,-16(fp)
 80088d0:	e17ffd15 	stw	r5,-12(fp)
 80088d4:	e1bffe15 	stw	r6,-8(fp)
 80088d8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 80088dc:	e0bffc17 	ldw	r2,-16(fp)
 80088e0:	10800017 	ldw	r2,0(r2)
 80088e4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 80088e8:	e0bffd17 	ldw	r2,-12(fp)
 80088ec:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 80088f0:	e0bffe17 	ldw	r2,-8(fp)
 80088f4:	e0fffd17 	ldw	r3,-12(fp)
 80088f8:	1885883a 	add	r2,r3,r2
 80088fc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 8008900:	00001206 	br	800894c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8008904:	e0bff917 	ldw	r2,-28(fp)
 8008908:	10800037 	ldwio	r2,0(r2)
 800890c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 8008910:	e0bffb17 	ldw	r2,-20(fp)
 8008914:	10a0000c 	andi	r2,r2,32768
 8008918:	10000626 	beq	r2,zero,8008934 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800891c:	e0bff817 	ldw	r2,-32(fp)
 8008920:	10c00044 	addi	r3,r2,1
 8008924:	e0fff815 	stw	r3,-32(fp)
 8008928:	e0fffb17 	ldw	r3,-20(fp)
 800892c:	10c00005 	stb	r3,0(r2)
 8008930:	00000606 	br	800894c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 8008934:	e0fff817 	ldw	r3,-32(fp)
 8008938:	e0bffd17 	ldw	r2,-12(fp)
 800893c:	1880071e 	bne	r3,r2,800895c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 8008940:	e0bfff17 	ldw	r2,-4(fp)
 8008944:	1090000c 	andi	r2,r2,16384
 8008948:	1000061e 	bne	r2,zero,8008964 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 800894c:	e0fff817 	ldw	r3,-32(fp)
 8008950:	e0bffa17 	ldw	r2,-24(fp)
 8008954:	18bfeb36 	bltu	r3,r2,8008904 <_gp+0xffff6848>
 8008958:	00000306 	br	8008968 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 800895c:	0001883a 	nop
 8008960:	00000106 	br	8008968 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 8008964:	0001883a 	nop
    
  }

  if (ptr != buffer)
 8008968:	e0fff817 	ldw	r3,-32(fp)
 800896c:	e0bffd17 	ldw	r2,-12(fp)
 8008970:	18800426 	beq	r3,r2,8008984 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 8008974:	e0fff817 	ldw	r3,-32(fp)
 8008978:	e0bffd17 	ldw	r2,-12(fp)
 800897c:	1885c83a 	sub	r2,r3,r2
 8008980:	00000606 	br	800899c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 8008984:	e0bfff17 	ldw	r2,-4(fp)
 8008988:	1090000c 	andi	r2,r2,16384
 800898c:	10000226 	beq	r2,zero,8008998 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 8008990:	00bffd44 	movi	r2,-11
 8008994:	00000106 	br	800899c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 8008998:	00bffec4 	movi	r2,-5
}
 800899c:	e037883a 	mov	sp,fp
 80089a0:	df000017 	ldw	fp,0(sp)
 80089a4:	dec00104 	addi	sp,sp,4
 80089a8:	f800283a 	ret

080089ac <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80089ac:	defff904 	addi	sp,sp,-28
 80089b0:	df000615 	stw	fp,24(sp)
 80089b4:	df000604 	addi	fp,sp,24
 80089b8:	e13ffc15 	stw	r4,-16(fp)
 80089bc:	e17ffd15 	stw	r5,-12(fp)
 80089c0:	e1bffe15 	stw	r6,-8(fp)
 80089c4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 80089c8:	e0bffc17 	ldw	r2,-16(fp)
 80089cc:	10800017 	ldw	r2,0(r2)
 80089d0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 80089d4:	e0bffe17 	ldw	r2,-8(fp)
 80089d8:	e0fffd17 	ldw	r3,-12(fp)
 80089dc:	1885883a 	add	r2,r3,r2
 80089e0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 80089e4:	00000e06 	br	8008a20 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 80089e8:	e0bffa17 	ldw	r2,-24(fp)
 80089ec:	10800104 	addi	r2,r2,4
 80089f0:	10800037 	ldwio	r2,0(r2)
 80089f4:	10bfffec 	andhi	r2,r2,65535
 80089f8:	10000926 	beq	r2,zero,8008a20 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 80089fc:	e0fffa17 	ldw	r3,-24(fp)
 8008a00:	e0bffd17 	ldw	r2,-12(fp)
 8008a04:	11000044 	addi	r4,r2,1
 8008a08:	e13ffd15 	stw	r4,-12(fp)
 8008a0c:	10800003 	ldbu	r2,0(r2)
 8008a10:	10803fcc 	andi	r2,r2,255
 8008a14:	1080201c 	xori	r2,r2,128
 8008a18:	10bfe004 	addi	r2,r2,-128
 8008a1c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8008a20:	e0fffd17 	ldw	r3,-12(fp)
 8008a24:	e0bffb17 	ldw	r2,-20(fp)
 8008a28:	18bfef36 	bltu	r3,r2,80089e8 <_gp+0xffff692c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 8008a2c:	e0bffe17 	ldw	r2,-8(fp)
}
 8008a30:	e037883a 	mov	sp,fp
 8008a34:	df000017 	ldw	fp,0(sp)
 8008a38:	dec00104 	addi	sp,sp,4
 8008a3c:	f800283a 	ret

08008a40 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8008a40:	defffa04 	addi	sp,sp,-24
 8008a44:	dfc00515 	stw	ra,20(sp)
 8008a48:	df000415 	stw	fp,16(sp)
 8008a4c:	df000404 	addi	fp,sp,16
 8008a50:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8008a54:	0007883a 	mov	r3,zero
 8008a58:	e0bfff17 	ldw	r2,-4(fp)
 8008a5c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8008a60:	e0bfff17 	ldw	r2,-4(fp)
 8008a64:	10800104 	addi	r2,r2,4
 8008a68:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8008a6c:	0005303a 	rdctl	r2,status
 8008a70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8008a74:	e0fffd17 	ldw	r3,-12(fp)
 8008a78:	00bfff84 	movi	r2,-2
 8008a7c:	1884703a 	and	r2,r3,r2
 8008a80:	1001703a 	wrctl	status,r2
  
  return context;
 8008a84:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8008a88:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8008a8c:	80095f80 	call	80095f8 <alt_tick>
 8008a90:	e0bffc17 	ldw	r2,-16(fp)
 8008a94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8008a98:	e0bffe17 	ldw	r2,-8(fp)
 8008a9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8008aa0:	0001883a 	nop
 8008aa4:	e037883a 	mov	sp,fp
 8008aa8:	dfc00117 	ldw	ra,4(sp)
 8008aac:	df000017 	ldw	fp,0(sp)
 8008ab0:	dec00204 	addi	sp,sp,8
 8008ab4:	f800283a 	ret

08008ab8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8008ab8:	defff804 	addi	sp,sp,-32
 8008abc:	dfc00715 	stw	ra,28(sp)
 8008ac0:	df000615 	stw	fp,24(sp)
 8008ac4:	df000604 	addi	fp,sp,24
 8008ac8:	e13ffc15 	stw	r4,-16(fp)
 8008acc:	e17ffd15 	stw	r5,-12(fp)
 8008ad0:	e1bffe15 	stw	r6,-8(fp)
 8008ad4:	e1ffff15 	stw	r7,-4(fp)
 8008ad8:	e0bfff17 	ldw	r2,-4(fp)
 8008adc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8008ae0:	d0a0cd17 	ldw	r2,-31948(gp)
 8008ae4:	1000021e 	bne	r2,zero,8008af0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8008ae8:	e0bffb17 	ldw	r2,-20(fp)
 8008aec:	d0a0cd15 	stw	r2,-31948(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8008af0:	e0bffc17 	ldw	r2,-16(fp)
 8008af4:	10800104 	addi	r2,r2,4
 8008af8:	00c001c4 	movi	r3,7
 8008afc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8008b00:	d8000015 	stw	zero,0(sp)
 8008b04:	e1fffc17 	ldw	r7,-16(fp)
 8008b08:	01820074 	movhi	r6,2049
 8008b0c:	31a29004 	addi	r6,r6,-30144
 8008b10:	e17ffe17 	ldw	r5,-8(fp)
 8008b14:	e13ffd17 	ldw	r4,-12(fp)
 8008b18:	8008e540 	call	8008e54 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8008b1c:	0001883a 	nop
 8008b20:	e037883a 	mov	sp,fp
 8008b24:	dfc00117 	ldw	ra,4(sp)
 8008b28:	df000017 	ldw	fp,0(sp)
 8008b2c:	dec00204 	addi	sp,sp,8
 8008b30:	f800283a 	ret

08008b34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8008b34:	defffe04 	addi	sp,sp,-8
 8008b38:	dfc00115 	stw	ra,4(sp)
 8008b3c:	df000015 	stw	fp,0(sp)
 8008b40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8008b44:	d0a00817 	ldw	r2,-32736(gp)
 8008b48:	10000326 	beq	r2,zero,8008b58 <alt_get_errno+0x24>
 8008b4c:	d0a00817 	ldw	r2,-32736(gp)
 8008b50:	103ee83a 	callr	r2
 8008b54:	00000106 	br	8008b5c <alt_get_errno+0x28>
 8008b58:	d0a0c804 	addi	r2,gp,-31968
}
 8008b5c:	e037883a 	mov	sp,fp
 8008b60:	dfc00117 	ldw	ra,4(sp)
 8008b64:	df000017 	ldw	fp,0(sp)
 8008b68:	dec00204 	addi	sp,sp,8
 8008b6c:	f800283a 	ret

08008b70 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8008b70:	defffb04 	addi	sp,sp,-20
 8008b74:	dfc00415 	stw	ra,16(sp)
 8008b78:	df000315 	stw	fp,12(sp)
 8008b7c:	df000304 	addi	fp,sp,12
 8008b80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8008b84:	e0bfff17 	ldw	r2,-4(fp)
 8008b88:	10000816 	blt	r2,zero,8008bac <close+0x3c>
 8008b8c:	01400304 	movi	r5,12
 8008b90:	e13fff17 	ldw	r4,-4(fp)
 8008b94:	8009d680 	call	8009d68 <__mulsi3>
 8008b98:	1007883a 	mov	r3,r2
 8008b9c:	00820074 	movhi	r2,2049
 8008ba0:	10a7cf04 	addi	r2,r2,-24772
 8008ba4:	1885883a 	add	r2,r3,r2
 8008ba8:	00000106 	br	8008bb0 <close+0x40>
 8008bac:	0005883a 	mov	r2,zero
 8008bb0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8008bb4:	e0bffd17 	ldw	r2,-12(fp)
 8008bb8:	10001926 	beq	r2,zero,8008c20 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8008bbc:	e0bffd17 	ldw	r2,-12(fp)
 8008bc0:	10800017 	ldw	r2,0(r2)
 8008bc4:	10800417 	ldw	r2,16(r2)
 8008bc8:	10000626 	beq	r2,zero,8008be4 <close+0x74>
 8008bcc:	e0bffd17 	ldw	r2,-12(fp)
 8008bd0:	10800017 	ldw	r2,0(r2)
 8008bd4:	10800417 	ldw	r2,16(r2)
 8008bd8:	e13ffd17 	ldw	r4,-12(fp)
 8008bdc:	103ee83a 	callr	r2
 8008be0:	00000106 	br	8008be8 <close+0x78>
 8008be4:	0005883a 	mov	r2,zero
 8008be8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8008bec:	e13fff17 	ldw	r4,-4(fp)
 8008bf0:	80094d80 	call	80094d8 <alt_release_fd>
    if (rval < 0)
 8008bf4:	e0bffe17 	ldw	r2,-8(fp)
 8008bf8:	1000070e 	bge	r2,zero,8008c18 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8008bfc:	8008b340 	call	8008b34 <alt_get_errno>
 8008c00:	1007883a 	mov	r3,r2
 8008c04:	e0bffe17 	ldw	r2,-8(fp)
 8008c08:	0085c83a 	sub	r2,zero,r2
 8008c0c:	18800015 	stw	r2,0(r3)
      return -1;
 8008c10:	00bfffc4 	movi	r2,-1
 8008c14:	00000706 	br	8008c34 <close+0xc4>
    }
    return 0;
 8008c18:	0005883a 	mov	r2,zero
 8008c1c:	00000506 	br	8008c34 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8008c20:	8008b340 	call	8008b34 <alt_get_errno>
 8008c24:	1007883a 	mov	r3,r2
 8008c28:	00801444 	movi	r2,81
 8008c2c:	18800015 	stw	r2,0(r3)
    return -1;
 8008c30:	00bfffc4 	movi	r2,-1
  }
}
 8008c34:	e037883a 	mov	sp,fp
 8008c38:	dfc00117 	ldw	ra,4(sp)
 8008c3c:	df000017 	ldw	fp,0(sp)
 8008c40:	dec00204 	addi	sp,sp,8
 8008c44:	f800283a 	ret

08008c48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8008c48:	deffff04 	addi	sp,sp,-4
 8008c4c:	df000015 	stw	fp,0(sp)
 8008c50:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8008c54:	0001883a 	nop
 8008c58:	e037883a 	mov	sp,fp
 8008c5c:	df000017 	ldw	fp,0(sp)
 8008c60:	dec00104 	addi	sp,sp,4
 8008c64:	f800283a 	ret

08008c68 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8008c68:	defffc04 	addi	sp,sp,-16
 8008c6c:	df000315 	stw	fp,12(sp)
 8008c70:	df000304 	addi	fp,sp,12
 8008c74:	e13ffd15 	stw	r4,-12(fp)
 8008c78:	e17ffe15 	stw	r5,-8(fp)
 8008c7c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8008c80:	e0bfff17 	ldw	r2,-4(fp)
}
 8008c84:	e037883a 	mov	sp,fp
 8008c88:	df000017 	ldw	fp,0(sp)
 8008c8c:	dec00104 	addi	sp,sp,4
 8008c90:	f800283a 	ret

08008c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8008c94:	defffe04 	addi	sp,sp,-8
 8008c98:	dfc00115 	stw	ra,4(sp)
 8008c9c:	df000015 	stw	fp,0(sp)
 8008ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8008ca4:	d0a00817 	ldw	r2,-32736(gp)
 8008ca8:	10000326 	beq	r2,zero,8008cb8 <alt_get_errno+0x24>
 8008cac:	d0a00817 	ldw	r2,-32736(gp)
 8008cb0:	103ee83a 	callr	r2
 8008cb4:	00000106 	br	8008cbc <alt_get_errno+0x28>
 8008cb8:	d0a0c804 	addi	r2,gp,-31968
}
 8008cbc:	e037883a 	mov	sp,fp
 8008cc0:	dfc00117 	ldw	ra,4(sp)
 8008cc4:	df000017 	ldw	fp,0(sp)
 8008cc8:	dec00204 	addi	sp,sp,8
 8008ccc:	f800283a 	ret

08008cd0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8008cd0:	defffa04 	addi	sp,sp,-24
 8008cd4:	dfc00515 	stw	ra,20(sp)
 8008cd8:	df000415 	stw	fp,16(sp)
 8008cdc:	df000404 	addi	fp,sp,16
 8008ce0:	e13ffe15 	stw	r4,-8(fp)
 8008ce4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8008ce8:	e0bffe17 	ldw	r2,-8(fp)
 8008cec:	10000326 	beq	r2,zero,8008cfc <alt_dev_llist_insert+0x2c>
 8008cf0:	e0bffe17 	ldw	r2,-8(fp)
 8008cf4:	10800217 	ldw	r2,8(r2)
 8008cf8:	1000061e 	bne	r2,zero,8008d14 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8008cfc:	8008c940 	call	8008c94 <alt_get_errno>
 8008d00:	1007883a 	mov	r3,r2
 8008d04:	00800584 	movi	r2,22
 8008d08:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8008d0c:	00bffa84 	movi	r2,-22
 8008d10:	00001306 	br	8008d60 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8008d14:	e0bffe17 	ldw	r2,-8(fp)
 8008d18:	e0ffff17 	ldw	r3,-4(fp)
 8008d1c:	e0fffc15 	stw	r3,-16(fp)
 8008d20:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8008d24:	e0bffd17 	ldw	r2,-12(fp)
 8008d28:	e0fffc17 	ldw	r3,-16(fp)
 8008d2c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8008d30:	e0bffc17 	ldw	r2,-16(fp)
 8008d34:	10c00017 	ldw	r3,0(r2)
 8008d38:	e0bffd17 	ldw	r2,-12(fp)
 8008d3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8008d40:	e0bffc17 	ldw	r2,-16(fp)
 8008d44:	10800017 	ldw	r2,0(r2)
 8008d48:	e0fffd17 	ldw	r3,-12(fp)
 8008d4c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8008d50:	e0bffc17 	ldw	r2,-16(fp)
 8008d54:	e0fffd17 	ldw	r3,-12(fp)
 8008d58:	10c00015 	stw	r3,0(r2)

  return 0;  
 8008d5c:	0005883a 	mov	r2,zero
}
 8008d60:	e037883a 	mov	sp,fp
 8008d64:	dfc00117 	ldw	ra,4(sp)
 8008d68:	df000017 	ldw	fp,0(sp)
 8008d6c:	dec00204 	addi	sp,sp,8
 8008d70:	f800283a 	ret

08008d74 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8008d74:	defffd04 	addi	sp,sp,-12
 8008d78:	dfc00215 	stw	ra,8(sp)
 8008d7c:	df000115 	stw	fp,4(sp)
 8008d80:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8008d84:	00820074 	movhi	r2,2049
 8008d88:	10a77004 	addi	r2,r2,-25152
 8008d8c:	e0bfff15 	stw	r2,-4(fp)
 8008d90:	00000606 	br	8008dac <_do_ctors+0x38>
        (*ctor) (); 
 8008d94:	e0bfff17 	ldw	r2,-4(fp)
 8008d98:	10800017 	ldw	r2,0(r2)
 8008d9c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8008da0:	e0bfff17 	ldw	r2,-4(fp)
 8008da4:	10bfff04 	addi	r2,r2,-4
 8008da8:	e0bfff15 	stw	r2,-4(fp)
 8008dac:	e0ffff17 	ldw	r3,-4(fp)
 8008db0:	00820074 	movhi	r2,2049
 8008db4:	10a77104 	addi	r2,r2,-25148
 8008db8:	18bff62e 	bgeu	r3,r2,8008d94 <_gp+0xffff6cd8>
        (*ctor) (); 
}
 8008dbc:	0001883a 	nop
 8008dc0:	e037883a 	mov	sp,fp
 8008dc4:	dfc00117 	ldw	ra,4(sp)
 8008dc8:	df000017 	ldw	fp,0(sp)
 8008dcc:	dec00204 	addi	sp,sp,8
 8008dd0:	f800283a 	ret

08008dd4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8008dd4:	defffd04 	addi	sp,sp,-12
 8008dd8:	dfc00215 	stw	ra,8(sp)
 8008ddc:	df000115 	stw	fp,4(sp)
 8008de0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8008de4:	00820074 	movhi	r2,2049
 8008de8:	10a77004 	addi	r2,r2,-25152
 8008dec:	e0bfff15 	stw	r2,-4(fp)
 8008df0:	00000606 	br	8008e0c <_do_dtors+0x38>
        (*dtor) (); 
 8008df4:	e0bfff17 	ldw	r2,-4(fp)
 8008df8:	10800017 	ldw	r2,0(r2)
 8008dfc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8008e00:	e0bfff17 	ldw	r2,-4(fp)
 8008e04:	10bfff04 	addi	r2,r2,-4
 8008e08:	e0bfff15 	stw	r2,-4(fp)
 8008e0c:	e0ffff17 	ldw	r3,-4(fp)
 8008e10:	00820074 	movhi	r2,2049
 8008e14:	10a77104 	addi	r2,r2,-25148
 8008e18:	18bff62e 	bgeu	r3,r2,8008df4 <_gp+0xffff6d38>
        (*dtor) (); 
}
 8008e1c:	0001883a 	nop
 8008e20:	e037883a 	mov	sp,fp
 8008e24:	dfc00117 	ldw	ra,4(sp)
 8008e28:	df000017 	ldw	fp,0(sp)
 8008e2c:	dec00204 	addi	sp,sp,8
 8008e30:	f800283a 	ret

08008e34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8008e34:	deffff04 	addi	sp,sp,-4
 8008e38:	df000015 	stw	fp,0(sp)
 8008e3c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8008e40:	0001883a 	nop
 8008e44:	e037883a 	mov	sp,fp
 8008e48:	df000017 	ldw	fp,0(sp)
 8008e4c:	dec00104 	addi	sp,sp,4
 8008e50:	f800283a 	ret

08008e54 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8008e54:	defff904 	addi	sp,sp,-28
 8008e58:	dfc00615 	stw	ra,24(sp)
 8008e5c:	df000515 	stw	fp,20(sp)
 8008e60:	df000504 	addi	fp,sp,20
 8008e64:	e13ffc15 	stw	r4,-16(fp)
 8008e68:	e17ffd15 	stw	r5,-12(fp)
 8008e6c:	e1bffe15 	stw	r6,-8(fp)
 8008e70:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8008e74:	e0800217 	ldw	r2,8(fp)
 8008e78:	d8800015 	stw	r2,0(sp)
 8008e7c:	e1ffff17 	ldw	r7,-4(fp)
 8008e80:	e1bffe17 	ldw	r6,-8(fp)
 8008e84:	e17ffd17 	ldw	r5,-12(fp)
 8008e88:	e13ffc17 	ldw	r4,-16(fp)
 8008e8c:	80090040 	call	8009004 <alt_iic_isr_register>
}  
 8008e90:	e037883a 	mov	sp,fp
 8008e94:	dfc00117 	ldw	ra,4(sp)
 8008e98:	df000017 	ldw	fp,0(sp)
 8008e9c:	dec00204 	addi	sp,sp,8
 8008ea0:	f800283a 	ret

08008ea4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8008ea4:	defff904 	addi	sp,sp,-28
 8008ea8:	df000615 	stw	fp,24(sp)
 8008eac:	df000604 	addi	fp,sp,24
 8008eb0:	e13ffe15 	stw	r4,-8(fp)
 8008eb4:	e17fff15 	stw	r5,-4(fp)
 8008eb8:	e0bfff17 	ldw	r2,-4(fp)
 8008ebc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8008ec0:	0005303a 	rdctl	r2,status
 8008ec4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8008ec8:	e0fffb17 	ldw	r3,-20(fp)
 8008ecc:	00bfff84 	movi	r2,-2
 8008ed0:	1884703a 	and	r2,r3,r2
 8008ed4:	1001703a 	wrctl	status,r2
  
  return context;
 8008ed8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8008edc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8008ee0:	00c00044 	movi	r3,1
 8008ee4:	e0bffa17 	ldw	r2,-24(fp)
 8008ee8:	1884983a 	sll	r2,r3,r2
 8008eec:	1007883a 	mov	r3,r2
 8008ef0:	d0a0cc17 	ldw	r2,-31952(gp)
 8008ef4:	1884b03a 	or	r2,r3,r2
 8008ef8:	d0a0cc15 	stw	r2,-31952(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8008efc:	d0a0cc17 	ldw	r2,-31952(gp)
 8008f00:	100170fa 	wrctl	ienable,r2
 8008f04:	e0bffc17 	ldw	r2,-16(fp)
 8008f08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8008f0c:	e0bffd17 	ldw	r2,-12(fp)
 8008f10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8008f14:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8008f18:	0001883a 	nop
}
 8008f1c:	e037883a 	mov	sp,fp
 8008f20:	df000017 	ldw	fp,0(sp)
 8008f24:	dec00104 	addi	sp,sp,4
 8008f28:	f800283a 	ret

08008f2c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8008f2c:	defff904 	addi	sp,sp,-28
 8008f30:	df000615 	stw	fp,24(sp)
 8008f34:	df000604 	addi	fp,sp,24
 8008f38:	e13ffe15 	stw	r4,-8(fp)
 8008f3c:	e17fff15 	stw	r5,-4(fp)
 8008f40:	e0bfff17 	ldw	r2,-4(fp)
 8008f44:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8008f48:	0005303a 	rdctl	r2,status
 8008f4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8008f50:	e0fffb17 	ldw	r3,-20(fp)
 8008f54:	00bfff84 	movi	r2,-2
 8008f58:	1884703a 	and	r2,r3,r2
 8008f5c:	1001703a 	wrctl	status,r2
  
  return context;
 8008f60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8008f64:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8008f68:	00c00044 	movi	r3,1
 8008f6c:	e0bffa17 	ldw	r2,-24(fp)
 8008f70:	1884983a 	sll	r2,r3,r2
 8008f74:	0084303a 	nor	r2,zero,r2
 8008f78:	1007883a 	mov	r3,r2
 8008f7c:	d0a0cc17 	ldw	r2,-31952(gp)
 8008f80:	1884703a 	and	r2,r3,r2
 8008f84:	d0a0cc15 	stw	r2,-31952(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8008f88:	d0a0cc17 	ldw	r2,-31952(gp)
 8008f8c:	100170fa 	wrctl	ienable,r2
 8008f90:	e0bffc17 	ldw	r2,-16(fp)
 8008f94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8008f98:	e0bffd17 	ldw	r2,-12(fp)
 8008f9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8008fa0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8008fa4:	0001883a 	nop
}
 8008fa8:	e037883a 	mov	sp,fp
 8008fac:	df000017 	ldw	fp,0(sp)
 8008fb0:	dec00104 	addi	sp,sp,4
 8008fb4:	f800283a 	ret

08008fb8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8008fb8:	defffc04 	addi	sp,sp,-16
 8008fbc:	df000315 	stw	fp,12(sp)
 8008fc0:	df000304 	addi	fp,sp,12
 8008fc4:	e13ffe15 	stw	r4,-8(fp)
 8008fc8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8008fcc:	000530fa 	rdctl	r2,ienable
 8008fd0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8008fd4:	00c00044 	movi	r3,1
 8008fd8:	e0bfff17 	ldw	r2,-4(fp)
 8008fdc:	1884983a 	sll	r2,r3,r2
 8008fe0:	1007883a 	mov	r3,r2
 8008fe4:	e0bffd17 	ldw	r2,-12(fp)
 8008fe8:	1884703a 	and	r2,r3,r2
 8008fec:	1004c03a 	cmpne	r2,r2,zero
 8008ff0:	10803fcc 	andi	r2,r2,255
}
 8008ff4:	e037883a 	mov	sp,fp
 8008ff8:	df000017 	ldw	fp,0(sp)
 8008ffc:	dec00104 	addi	sp,sp,4
 8009000:	f800283a 	ret

08009004 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8009004:	defff504 	addi	sp,sp,-44
 8009008:	dfc00a15 	stw	ra,40(sp)
 800900c:	df000915 	stw	fp,36(sp)
 8009010:	df000904 	addi	fp,sp,36
 8009014:	e13ffc15 	stw	r4,-16(fp)
 8009018:	e17ffd15 	stw	r5,-12(fp)
 800901c:	e1bffe15 	stw	r6,-8(fp)
 8009020:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8009024:	00bffa84 	movi	r2,-22
 8009028:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800902c:	e0bffd17 	ldw	r2,-12(fp)
 8009030:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8009034:	e0bff817 	ldw	r2,-32(fp)
 8009038:	10800808 	cmpgei	r2,r2,32
 800903c:	1000271e 	bne	r2,zero,80090dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8009040:	0005303a 	rdctl	r2,status
 8009044:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8009048:	e0fffb17 	ldw	r3,-20(fp)
 800904c:	00bfff84 	movi	r2,-2
 8009050:	1884703a 	and	r2,r3,r2
 8009054:	1001703a 	wrctl	status,r2
  
  return context;
 8009058:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800905c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8009060:	00820074 	movhi	r2,2049
 8009064:	10a8ff04 	addi	r2,r2,-23556
 8009068:	e0fff817 	ldw	r3,-32(fp)
 800906c:	180690fa 	slli	r3,r3,3
 8009070:	10c5883a 	add	r2,r2,r3
 8009074:	e0fffe17 	ldw	r3,-8(fp)
 8009078:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800907c:	00820074 	movhi	r2,2049
 8009080:	10a8ff04 	addi	r2,r2,-23556
 8009084:	e0fff817 	ldw	r3,-32(fp)
 8009088:	180690fa 	slli	r3,r3,3
 800908c:	10c5883a 	add	r2,r2,r3
 8009090:	10800104 	addi	r2,r2,4
 8009094:	e0ffff17 	ldw	r3,-4(fp)
 8009098:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800909c:	e0bffe17 	ldw	r2,-8(fp)
 80090a0:	10000526 	beq	r2,zero,80090b8 <alt_iic_isr_register+0xb4>
 80090a4:	e0bff817 	ldw	r2,-32(fp)
 80090a8:	100b883a 	mov	r5,r2
 80090ac:	e13ffc17 	ldw	r4,-16(fp)
 80090b0:	8008ea40 	call	8008ea4 <alt_ic_irq_enable>
 80090b4:	00000406 	br	80090c8 <alt_iic_isr_register+0xc4>
 80090b8:	e0bff817 	ldw	r2,-32(fp)
 80090bc:	100b883a 	mov	r5,r2
 80090c0:	e13ffc17 	ldw	r4,-16(fp)
 80090c4:	8008f2c0 	call	8008f2c <alt_ic_irq_disable>
 80090c8:	e0bff715 	stw	r2,-36(fp)
 80090cc:	e0bffa17 	ldw	r2,-24(fp)
 80090d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80090d4:	e0bff917 	ldw	r2,-28(fp)
 80090d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80090dc:	e0bff717 	ldw	r2,-36(fp)
}
 80090e0:	e037883a 	mov	sp,fp
 80090e4:	dfc00117 	ldw	ra,4(sp)
 80090e8:	df000017 	ldw	fp,0(sp)
 80090ec:	dec00204 	addi	sp,sp,8
 80090f0:	f800283a 	ret

080090f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80090f4:	defff804 	addi	sp,sp,-32
 80090f8:	dfc00715 	stw	ra,28(sp)
 80090fc:	df000615 	stw	fp,24(sp)
 8009100:	dc000515 	stw	r16,20(sp)
 8009104:	df000604 	addi	fp,sp,24
 8009108:	e13ffb15 	stw	r4,-20(fp)
 800910c:	e17ffc15 	stw	r5,-16(fp)
 8009110:	e1bffd15 	stw	r6,-12(fp)
 8009114:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8009118:	e1bffe17 	ldw	r6,-8(fp)
 800911c:	e17ffd17 	ldw	r5,-12(fp)
 8009120:	e13ffc17 	ldw	r4,-16(fp)
 8009124:	800937c0 	call	800937c <open>
 8009128:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800912c:	e0bffa17 	ldw	r2,-24(fp)
 8009130:	10002216 	blt	r2,zero,80091bc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8009134:	04020074 	movhi	r16,2049
 8009138:	8427cf04 	addi	r16,r16,-24772
 800913c:	e0bffa17 	ldw	r2,-24(fp)
 8009140:	01400304 	movi	r5,12
 8009144:	1009883a 	mov	r4,r2
 8009148:	8009d680 	call	8009d68 <__mulsi3>
 800914c:	8085883a 	add	r2,r16,r2
 8009150:	10c00017 	ldw	r3,0(r2)
 8009154:	e0bffb17 	ldw	r2,-20(fp)
 8009158:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800915c:	04020074 	movhi	r16,2049
 8009160:	8427cf04 	addi	r16,r16,-24772
 8009164:	e0bffa17 	ldw	r2,-24(fp)
 8009168:	01400304 	movi	r5,12
 800916c:	1009883a 	mov	r4,r2
 8009170:	8009d680 	call	8009d68 <__mulsi3>
 8009174:	8085883a 	add	r2,r16,r2
 8009178:	10800104 	addi	r2,r2,4
 800917c:	10c00017 	ldw	r3,0(r2)
 8009180:	e0bffb17 	ldw	r2,-20(fp)
 8009184:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8009188:	04020074 	movhi	r16,2049
 800918c:	8427cf04 	addi	r16,r16,-24772
 8009190:	e0bffa17 	ldw	r2,-24(fp)
 8009194:	01400304 	movi	r5,12
 8009198:	1009883a 	mov	r4,r2
 800919c:	8009d680 	call	8009d68 <__mulsi3>
 80091a0:	8085883a 	add	r2,r16,r2
 80091a4:	10800204 	addi	r2,r2,8
 80091a8:	10c00017 	ldw	r3,0(r2)
 80091ac:	e0bffb17 	ldw	r2,-20(fp)
 80091b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80091b4:	e13ffa17 	ldw	r4,-24(fp)
 80091b8:	80094d80 	call	80094d8 <alt_release_fd>
  }
} 
 80091bc:	0001883a 	nop
 80091c0:	e6ffff04 	addi	sp,fp,-4
 80091c4:	dfc00217 	ldw	ra,8(sp)
 80091c8:	df000117 	ldw	fp,4(sp)
 80091cc:	dc000017 	ldw	r16,0(sp)
 80091d0:	dec00304 	addi	sp,sp,12
 80091d4:	f800283a 	ret

080091d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80091d8:	defffb04 	addi	sp,sp,-20
 80091dc:	dfc00415 	stw	ra,16(sp)
 80091e0:	df000315 	stw	fp,12(sp)
 80091e4:	df000304 	addi	fp,sp,12
 80091e8:	e13ffd15 	stw	r4,-12(fp)
 80091ec:	e17ffe15 	stw	r5,-8(fp)
 80091f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80091f4:	01c07fc4 	movi	r7,511
 80091f8:	01800044 	movi	r6,1
 80091fc:	e17ffd17 	ldw	r5,-12(fp)
 8009200:	01020074 	movhi	r4,2049
 8009204:	2127d204 	addi	r4,r4,-24760
 8009208:	80090f40 	call	80090f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800920c:	01c07fc4 	movi	r7,511
 8009210:	000d883a 	mov	r6,zero
 8009214:	e17ffe17 	ldw	r5,-8(fp)
 8009218:	01020074 	movhi	r4,2049
 800921c:	2127cf04 	addi	r4,r4,-24772
 8009220:	80090f40 	call	80090f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8009224:	01c07fc4 	movi	r7,511
 8009228:	01800044 	movi	r6,1
 800922c:	e17fff17 	ldw	r5,-4(fp)
 8009230:	01020074 	movhi	r4,2049
 8009234:	2127d504 	addi	r4,r4,-24748
 8009238:	80090f40 	call	80090f4 <alt_open_fd>
}  
 800923c:	0001883a 	nop
 8009240:	e037883a 	mov	sp,fp
 8009244:	dfc00117 	ldw	ra,4(sp)
 8009248:	df000017 	ldw	fp,0(sp)
 800924c:	dec00204 	addi	sp,sp,8
 8009250:	f800283a 	ret

08009254 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8009254:	defffe04 	addi	sp,sp,-8
 8009258:	dfc00115 	stw	ra,4(sp)
 800925c:	df000015 	stw	fp,0(sp)
 8009260:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8009264:	d0a00817 	ldw	r2,-32736(gp)
 8009268:	10000326 	beq	r2,zero,8009278 <alt_get_errno+0x24>
 800926c:	d0a00817 	ldw	r2,-32736(gp)
 8009270:	103ee83a 	callr	r2
 8009274:	00000106 	br	800927c <alt_get_errno+0x28>
 8009278:	d0a0c804 	addi	r2,gp,-31968
}
 800927c:	e037883a 	mov	sp,fp
 8009280:	dfc00117 	ldw	ra,4(sp)
 8009284:	df000017 	ldw	fp,0(sp)
 8009288:	dec00204 	addi	sp,sp,8
 800928c:	f800283a 	ret

08009290 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8009290:	defffb04 	addi	sp,sp,-20
 8009294:	dfc00415 	stw	ra,16(sp)
 8009298:	df000315 	stw	fp,12(sp)
 800929c:	dc000215 	stw	r16,8(sp)
 80092a0:	df000304 	addi	fp,sp,12
 80092a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80092a8:	e0bffe17 	ldw	r2,-8(fp)
 80092ac:	10800217 	ldw	r2,8(r2)
 80092b0:	10d00034 	orhi	r3,r2,16384
 80092b4:	e0bffe17 	ldw	r2,-8(fp)
 80092b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80092bc:	e03ffd15 	stw	zero,-12(fp)
 80092c0:	00002306 	br	8009350 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80092c4:	04020074 	movhi	r16,2049
 80092c8:	8427cf04 	addi	r16,r16,-24772
 80092cc:	e0bffd17 	ldw	r2,-12(fp)
 80092d0:	01400304 	movi	r5,12
 80092d4:	1009883a 	mov	r4,r2
 80092d8:	8009d680 	call	8009d68 <__mulsi3>
 80092dc:	8085883a 	add	r2,r16,r2
 80092e0:	10c00017 	ldw	r3,0(r2)
 80092e4:	e0bffe17 	ldw	r2,-8(fp)
 80092e8:	10800017 	ldw	r2,0(r2)
 80092ec:	1880151e 	bne	r3,r2,8009344 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80092f0:	04020074 	movhi	r16,2049
 80092f4:	8427cf04 	addi	r16,r16,-24772
 80092f8:	e0bffd17 	ldw	r2,-12(fp)
 80092fc:	01400304 	movi	r5,12
 8009300:	1009883a 	mov	r4,r2
 8009304:	8009d680 	call	8009d68 <__mulsi3>
 8009308:	8085883a 	add	r2,r16,r2
 800930c:	10800204 	addi	r2,r2,8
 8009310:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8009314:	10000b0e 	bge	r2,zero,8009344 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8009318:	01400304 	movi	r5,12
 800931c:	e13ffd17 	ldw	r4,-12(fp)
 8009320:	8009d680 	call	8009d68 <__mulsi3>
 8009324:	1007883a 	mov	r3,r2
 8009328:	00820074 	movhi	r2,2049
 800932c:	10a7cf04 	addi	r2,r2,-24772
 8009330:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8009334:	e0bffe17 	ldw	r2,-8(fp)
 8009338:	18800226 	beq	r3,r2,8009344 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800933c:	00bffcc4 	movi	r2,-13
 8009340:	00000806 	br	8009364 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8009344:	e0bffd17 	ldw	r2,-12(fp)
 8009348:	10800044 	addi	r2,r2,1
 800934c:	e0bffd15 	stw	r2,-12(fp)
 8009350:	d0a00717 	ldw	r2,-32740(gp)
 8009354:	1007883a 	mov	r3,r2
 8009358:	e0bffd17 	ldw	r2,-12(fp)
 800935c:	18bfd92e 	bgeu	r3,r2,80092c4 <_gp+0xffff7208>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8009360:	0005883a 	mov	r2,zero
}
 8009364:	e6ffff04 	addi	sp,fp,-4
 8009368:	dfc00217 	ldw	ra,8(sp)
 800936c:	df000117 	ldw	fp,4(sp)
 8009370:	dc000017 	ldw	r16,0(sp)
 8009374:	dec00304 	addi	sp,sp,12
 8009378:	f800283a 	ret

0800937c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800937c:	defff604 	addi	sp,sp,-40
 8009380:	dfc00915 	stw	ra,36(sp)
 8009384:	df000815 	stw	fp,32(sp)
 8009388:	df000804 	addi	fp,sp,32
 800938c:	e13ffd15 	stw	r4,-12(fp)
 8009390:	e17ffe15 	stw	r5,-8(fp)
 8009394:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8009398:	00bfffc4 	movi	r2,-1
 800939c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80093a0:	00bffb44 	movi	r2,-19
 80093a4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80093a8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80093ac:	d1600504 	addi	r5,gp,-32748
 80093b0:	e13ffd17 	ldw	r4,-12(fp)
 80093b4:	80097240 	call	8009724 <alt_find_dev>
 80093b8:	e0bff815 	stw	r2,-32(fp)
 80093bc:	e0bff817 	ldw	r2,-32(fp)
 80093c0:	1000051e 	bne	r2,zero,80093d8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80093c4:	e13ffd17 	ldw	r4,-12(fp)
 80093c8:	80097b40 	call	80097b4 <alt_find_file>
 80093cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80093d0:	00800044 	movi	r2,1
 80093d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80093d8:	e0bff817 	ldw	r2,-32(fp)
 80093dc:	10002b26 	beq	r2,zero,800948c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80093e0:	e13ff817 	ldw	r4,-32(fp)
 80093e4:	80098bc0 	call	80098bc <alt_get_fd>
 80093e8:	e0bff915 	stw	r2,-28(fp)
 80093ec:	e0bff917 	ldw	r2,-28(fp)
 80093f0:	1000030e 	bge	r2,zero,8009400 <open+0x84>
    {
      status = index;
 80093f4:	e0bff917 	ldw	r2,-28(fp)
 80093f8:	e0bffa15 	stw	r2,-24(fp)
 80093fc:	00002506 	br	8009494 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8009400:	01400304 	movi	r5,12
 8009404:	e13ff917 	ldw	r4,-28(fp)
 8009408:	8009d680 	call	8009d68 <__mulsi3>
 800940c:	1007883a 	mov	r3,r2
 8009410:	00820074 	movhi	r2,2049
 8009414:	10a7cf04 	addi	r2,r2,-24772
 8009418:	1885883a 	add	r2,r3,r2
 800941c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8009420:	e0fffe17 	ldw	r3,-8(fp)
 8009424:	00900034 	movhi	r2,16384
 8009428:	10bfffc4 	addi	r2,r2,-1
 800942c:	1886703a 	and	r3,r3,r2
 8009430:	e0bffc17 	ldw	r2,-16(fp)
 8009434:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8009438:	e0bffb17 	ldw	r2,-20(fp)
 800943c:	1000051e 	bne	r2,zero,8009454 <open+0xd8>
 8009440:	e13ffc17 	ldw	r4,-16(fp)
 8009444:	80092900 	call	8009290 <alt_file_locked>
 8009448:	e0bffa15 	stw	r2,-24(fp)
 800944c:	e0bffa17 	ldw	r2,-24(fp)
 8009450:	10001016 	blt	r2,zero,8009494 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8009454:	e0bff817 	ldw	r2,-32(fp)
 8009458:	10800317 	ldw	r2,12(r2)
 800945c:	10000826 	beq	r2,zero,8009480 <open+0x104>
 8009460:	e0bff817 	ldw	r2,-32(fp)
 8009464:	10800317 	ldw	r2,12(r2)
 8009468:	e1ffff17 	ldw	r7,-4(fp)
 800946c:	e1bffe17 	ldw	r6,-8(fp)
 8009470:	e17ffd17 	ldw	r5,-12(fp)
 8009474:	e13ffc17 	ldw	r4,-16(fp)
 8009478:	103ee83a 	callr	r2
 800947c:	00000106 	br	8009484 <open+0x108>
 8009480:	0005883a 	mov	r2,zero
 8009484:	e0bffa15 	stw	r2,-24(fp)
 8009488:	00000206 	br	8009494 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800948c:	00bffb44 	movi	r2,-19
 8009490:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8009494:	e0bffa17 	ldw	r2,-24(fp)
 8009498:	1000090e 	bge	r2,zero,80094c0 <open+0x144>
  {
    alt_release_fd (index);  
 800949c:	e13ff917 	ldw	r4,-28(fp)
 80094a0:	80094d80 	call	80094d8 <alt_release_fd>
    ALT_ERRNO = -status;
 80094a4:	80092540 	call	8009254 <alt_get_errno>
 80094a8:	1007883a 	mov	r3,r2
 80094ac:	e0bffa17 	ldw	r2,-24(fp)
 80094b0:	0085c83a 	sub	r2,zero,r2
 80094b4:	18800015 	stw	r2,0(r3)
    return -1;
 80094b8:	00bfffc4 	movi	r2,-1
 80094bc:	00000106 	br	80094c4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80094c0:	e0bff917 	ldw	r2,-28(fp)
}
 80094c4:	e037883a 	mov	sp,fp
 80094c8:	dfc00117 	ldw	ra,4(sp)
 80094cc:	df000017 	ldw	fp,0(sp)
 80094d0:	dec00204 	addi	sp,sp,8
 80094d4:	f800283a 	ret

080094d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80094d8:	defffc04 	addi	sp,sp,-16
 80094dc:	dfc00315 	stw	ra,12(sp)
 80094e0:	df000215 	stw	fp,8(sp)
 80094e4:	dc000115 	stw	r16,4(sp)
 80094e8:	df000204 	addi	fp,sp,8
 80094ec:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80094f0:	e0bffe17 	ldw	r2,-8(fp)
 80094f4:	108000d0 	cmplti	r2,r2,3
 80094f8:	1000111e 	bne	r2,zero,8009540 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80094fc:	04020074 	movhi	r16,2049
 8009500:	8427cf04 	addi	r16,r16,-24772
 8009504:	e0bffe17 	ldw	r2,-8(fp)
 8009508:	01400304 	movi	r5,12
 800950c:	1009883a 	mov	r4,r2
 8009510:	8009d680 	call	8009d68 <__mulsi3>
 8009514:	8085883a 	add	r2,r16,r2
 8009518:	10800204 	addi	r2,r2,8
 800951c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8009520:	04020074 	movhi	r16,2049
 8009524:	8427cf04 	addi	r16,r16,-24772
 8009528:	e0bffe17 	ldw	r2,-8(fp)
 800952c:	01400304 	movi	r5,12
 8009530:	1009883a 	mov	r4,r2
 8009534:	8009d680 	call	8009d68 <__mulsi3>
 8009538:	8085883a 	add	r2,r16,r2
 800953c:	10000015 	stw	zero,0(r2)
  }
}
 8009540:	0001883a 	nop
 8009544:	e6ffff04 	addi	sp,fp,-4
 8009548:	dfc00217 	ldw	ra,8(sp)
 800954c:	df000117 	ldw	fp,4(sp)
 8009550:	dc000017 	ldw	r16,0(sp)
 8009554:	dec00304 	addi	sp,sp,12
 8009558:	f800283a 	ret

0800955c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800955c:	defffa04 	addi	sp,sp,-24
 8009560:	df000515 	stw	fp,20(sp)
 8009564:	df000504 	addi	fp,sp,20
 8009568:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800956c:	0005303a 	rdctl	r2,status
 8009570:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8009574:	e0fffc17 	ldw	r3,-16(fp)
 8009578:	00bfff84 	movi	r2,-2
 800957c:	1884703a 	and	r2,r3,r2
 8009580:	1001703a 	wrctl	status,r2
  
  return context;
 8009584:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8009588:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800958c:	e0bfff17 	ldw	r2,-4(fp)
 8009590:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8009594:	e0bffd17 	ldw	r2,-12(fp)
 8009598:	10800017 	ldw	r2,0(r2)
 800959c:	e0fffd17 	ldw	r3,-12(fp)
 80095a0:	18c00117 	ldw	r3,4(r3)
 80095a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80095a8:	e0bffd17 	ldw	r2,-12(fp)
 80095ac:	10800117 	ldw	r2,4(r2)
 80095b0:	e0fffd17 	ldw	r3,-12(fp)
 80095b4:	18c00017 	ldw	r3,0(r3)
 80095b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80095bc:	e0bffd17 	ldw	r2,-12(fp)
 80095c0:	e0fffd17 	ldw	r3,-12(fp)
 80095c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80095c8:	e0bffd17 	ldw	r2,-12(fp)
 80095cc:	e0fffd17 	ldw	r3,-12(fp)
 80095d0:	10c00015 	stw	r3,0(r2)
 80095d4:	e0bffb17 	ldw	r2,-20(fp)
 80095d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80095dc:	e0bffe17 	ldw	r2,-8(fp)
 80095e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80095e4:	0001883a 	nop
 80095e8:	e037883a 	mov	sp,fp
 80095ec:	df000017 	ldw	fp,0(sp)
 80095f0:	dec00104 	addi	sp,sp,4
 80095f4:	f800283a 	ret

080095f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80095f8:	defffb04 	addi	sp,sp,-20
 80095fc:	dfc00415 	stw	ra,16(sp)
 8009600:	df000315 	stw	fp,12(sp)
 8009604:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8009608:	d0a00a17 	ldw	r2,-32728(gp)
 800960c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8009610:	d0a0ce17 	ldw	r2,-31944(gp)
 8009614:	10800044 	addi	r2,r2,1
 8009618:	d0a0ce15 	stw	r2,-31944(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800961c:	00002e06 	br	80096d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8009620:	e0bffd17 	ldw	r2,-12(fp)
 8009624:	10800017 	ldw	r2,0(r2)
 8009628:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800962c:	e0bffd17 	ldw	r2,-12(fp)
 8009630:	10800403 	ldbu	r2,16(r2)
 8009634:	10803fcc 	andi	r2,r2,255
 8009638:	10000426 	beq	r2,zero,800964c <alt_tick+0x54>
 800963c:	d0a0ce17 	ldw	r2,-31944(gp)
 8009640:	1000021e 	bne	r2,zero,800964c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8009644:	e0bffd17 	ldw	r2,-12(fp)
 8009648:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800964c:	e0bffd17 	ldw	r2,-12(fp)
 8009650:	10800217 	ldw	r2,8(r2)
 8009654:	d0e0ce17 	ldw	r3,-31944(gp)
 8009658:	18801d36 	bltu	r3,r2,80096d0 <alt_tick+0xd8>
 800965c:	e0bffd17 	ldw	r2,-12(fp)
 8009660:	10800403 	ldbu	r2,16(r2)
 8009664:	10803fcc 	andi	r2,r2,255
 8009668:	1000191e 	bne	r2,zero,80096d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800966c:	e0bffd17 	ldw	r2,-12(fp)
 8009670:	10800317 	ldw	r2,12(r2)
 8009674:	e0fffd17 	ldw	r3,-12(fp)
 8009678:	18c00517 	ldw	r3,20(r3)
 800967c:	1809883a 	mov	r4,r3
 8009680:	103ee83a 	callr	r2
 8009684:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8009688:	e0bfff17 	ldw	r2,-4(fp)
 800968c:	1000031e 	bne	r2,zero,800969c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8009690:	e13ffd17 	ldw	r4,-12(fp)
 8009694:	800955c0 	call	800955c <alt_alarm_stop>
 8009698:	00000d06 	br	80096d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800969c:	e0bffd17 	ldw	r2,-12(fp)
 80096a0:	10c00217 	ldw	r3,8(r2)
 80096a4:	e0bfff17 	ldw	r2,-4(fp)
 80096a8:	1887883a 	add	r3,r3,r2
 80096ac:	e0bffd17 	ldw	r2,-12(fp)
 80096b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80096b4:	e0bffd17 	ldw	r2,-12(fp)
 80096b8:	10c00217 	ldw	r3,8(r2)
 80096bc:	d0a0ce17 	ldw	r2,-31944(gp)
 80096c0:	1880032e 	bgeu	r3,r2,80096d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80096c4:	e0bffd17 	ldw	r2,-12(fp)
 80096c8:	00c00044 	movi	r3,1
 80096cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80096d0:	e0bffe17 	ldw	r2,-8(fp)
 80096d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80096d8:	e0fffd17 	ldw	r3,-12(fp)
 80096dc:	d0a00a04 	addi	r2,gp,-32728
 80096e0:	18bfcf1e 	bne	r3,r2,8009620 <_gp+0xffff7564>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80096e4:	0001883a 	nop
}
 80096e8:	0001883a 	nop
 80096ec:	e037883a 	mov	sp,fp
 80096f0:	dfc00117 	ldw	ra,4(sp)
 80096f4:	df000017 	ldw	fp,0(sp)
 80096f8:	dec00204 	addi	sp,sp,8
 80096fc:	f800283a 	ret

08009700 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8009700:	deffff04 	addi	sp,sp,-4
 8009704:	df000015 	stw	fp,0(sp)
 8009708:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800970c:	000170fa 	wrctl	ienable,zero
}
 8009710:	0001883a 	nop
 8009714:	e037883a 	mov	sp,fp
 8009718:	df000017 	ldw	fp,0(sp)
 800971c:	dec00104 	addi	sp,sp,4
 8009720:	f800283a 	ret

08009724 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8009724:	defffa04 	addi	sp,sp,-24
 8009728:	dfc00515 	stw	ra,20(sp)
 800972c:	df000415 	stw	fp,16(sp)
 8009730:	df000404 	addi	fp,sp,16
 8009734:	e13ffe15 	stw	r4,-8(fp)
 8009738:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800973c:	e0bfff17 	ldw	r2,-4(fp)
 8009740:	10800017 	ldw	r2,0(r2)
 8009744:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8009748:	e13ffe17 	ldw	r4,-8(fp)
 800974c:	80083780 	call	8008378 <strlen>
 8009750:	10800044 	addi	r2,r2,1
 8009754:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8009758:	00000d06 	br	8009790 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800975c:	e0bffc17 	ldw	r2,-16(fp)
 8009760:	10800217 	ldw	r2,8(r2)
 8009764:	e0fffd17 	ldw	r3,-12(fp)
 8009768:	180d883a 	mov	r6,r3
 800976c:	e17ffe17 	ldw	r5,-8(fp)
 8009770:	1009883a 	mov	r4,r2
 8009774:	8009a500 	call	8009a50 <memcmp>
 8009778:	1000021e 	bne	r2,zero,8009784 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800977c:	e0bffc17 	ldw	r2,-16(fp)
 8009780:	00000706 	br	80097a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8009784:	e0bffc17 	ldw	r2,-16(fp)
 8009788:	10800017 	ldw	r2,0(r2)
 800978c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8009790:	e0fffc17 	ldw	r3,-16(fp)
 8009794:	e0bfff17 	ldw	r2,-4(fp)
 8009798:	18bff01e 	bne	r3,r2,800975c <_gp+0xffff76a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800979c:	0005883a 	mov	r2,zero
}
 80097a0:	e037883a 	mov	sp,fp
 80097a4:	dfc00117 	ldw	ra,4(sp)
 80097a8:	df000017 	ldw	fp,0(sp)
 80097ac:	dec00204 	addi	sp,sp,8
 80097b0:	f800283a 	ret

080097b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80097b4:	defffb04 	addi	sp,sp,-20
 80097b8:	dfc00415 	stw	ra,16(sp)
 80097bc:	df000315 	stw	fp,12(sp)
 80097c0:	df000304 	addi	fp,sp,12
 80097c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80097c8:	d0a00317 	ldw	r2,-32756(gp)
 80097cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80097d0:	00003106 	br	8009898 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80097d4:	e0bffd17 	ldw	r2,-12(fp)
 80097d8:	10800217 	ldw	r2,8(r2)
 80097dc:	1009883a 	mov	r4,r2
 80097e0:	80083780 	call	8008378 <strlen>
 80097e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80097e8:	e0bffd17 	ldw	r2,-12(fp)
 80097ec:	10c00217 	ldw	r3,8(r2)
 80097f0:	e0bffe17 	ldw	r2,-8(fp)
 80097f4:	10bfffc4 	addi	r2,r2,-1
 80097f8:	1885883a 	add	r2,r3,r2
 80097fc:	10800003 	ldbu	r2,0(r2)
 8009800:	10803fcc 	andi	r2,r2,255
 8009804:	1080201c 	xori	r2,r2,128
 8009808:	10bfe004 	addi	r2,r2,-128
 800980c:	10800bd8 	cmpnei	r2,r2,47
 8009810:	1000031e 	bne	r2,zero,8009820 <alt_find_file+0x6c>
    {
      len -= 1;
 8009814:	e0bffe17 	ldw	r2,-8(fp)
 8009818:	10bfffc4 	addi	r2,r2,-1
 800981c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8009820:	e0bffe17 	ldw	r2,-8(fp)
 8009824:	e0ffff17 	ldw	r3,-4(fp)
 8009828:	1885883a 	add	r2,r3,r2
 800982c:	10800003 	ldbu	r2,0(r2)
 8009830:	10803fcc 	andi	r2,r2,255
 8009834:	1080201c 	xori	r2,r2,128
 8009838:	10bfe004 	addi	r2,r2,-128
 800983c:	10800be0 	cmpeqi	r2,r2,47
 8009840:	1000081e 	bne	r2,zero,8009864 <alt_find_file+0xb0>
 8009844:	e0bffe17 	ldw	r2,-8(fp)
 8009848:	e0ffff17 	ldw	r3,-4(fp)
 800984c:	1885883a 	add	r2,r3,r2
 8009850:	10800003 	ldbu	r2,0(r2)
 8009854:	10803fcc 	andi	r2,r2,255
 8009858:	1080201c 	xori	r2,r2,128
 800985c:	10bfe004 	addi	r2,r2,-128
 8009860:	10000a1e 	bne	r2,zero,800988c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8009864:	e0bffd17 	ldw	r2,-12(fp)
 8009868:	10800217 	ldw	r2,8(r2)
 800986c:	e0fffe17 	ldw	r3,-8(fp)
 8009870:	180d883a 	mov	r6,r3
 8009874:	e17fff17 	ldw	r5,-4(fp)
 8009878:	1009883a 	mov	r4,r2
 800987c:	8009a500 	call	8009a50 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8009880:	1000021e 	bne	r2,zero,800988c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8009884:	e0bffd17 	ldw	r2,-12(fp)
 8009888:	00000706 	br	80098a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800988c:	e0bffd17 	ldw	r2,-12(fp)
 8009890:	10800017 	ldw	r2,0(r2)
 8009894:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8009898:	e0fffd17 	ldw	r3,-12(fp)
 800989c:	d0a00304 	addi	r2,gp,-32756
 80098a0:	18bfcc1e 	bne	r3,r2,80097d4 <_gp+0xffff7718>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80098a4:	0005883a 	mov	r2,zero
}
 80098a8:	e037883a 	mov	sp,fp
 80098ac:	dfc00117 	ldw	ra,4(sp)
 80098b0:	df000017 	ldw	fp,0(sp)
 80098b4:	dec00204 	addi	sp,sp,8
 80098b8:	f800283a 	ret

080098bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80098bc:	defffa04 	addi	sp,sp,-24
 80098c0:	dfc00515 	stw	ra,20(sp)
 80098c4:	df000415 	stw	fp,16(sp)
 80098c8:	dc000315 	stw	r16,12(sp)
 80098cc:	df000404 	addi	fp,sp,16
 80098d0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 80098d4:	00bffa04 	movi	r2,-24
 80098d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80098dc:	e03ffc15 	stw	zero,-16(fp)
 80098e0:	00001d06 	br	8009958 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80098e4:	04020074 	movhi	r16,2049
 80098e8:	8427cf04 	addi	r16,r16,-24772
 80098ec:	e0bffc17 	ldw	r2,-16(fp)
 80098f0:	01400304 	movi	r5,12
 80098f4:	1009883a 	mov	r4,r2
 80098f8:	8009d680 	call	8009d68 <__mulsi3>
 80098fc:	8085883a 	add	r2,r16,r2
 8009900:	10800017 	ldw	r2,0(r2)
 8009904:	1000111e 	bne	r2,zero,800994c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8009908:	04020074 	movhi	r16,2049
 800990c:	8427cf04 	addi	r16,r16,-24772
 8009910:	e0bffc17 	ldw	r2,-16(fp)
 8009914:	01400304 	movi	r5,12
 8009918:	1009883a 	mov	r4,r2
 800991c:	8009d680 	call	8009d68 <__mulsi3>
 8009920:	8085883a 	add	r2,r16,r2
 8009924:	e0fffe17 	ldw	r3,-8(fp)
 8009928:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800992c:	d0e00717 	ldw	r3,-32740(gp)
 8009930:	e0bffc17 	ldw	r2,-16(fp)
 8009934:	1880020e 	bge	r3,r2,8009940 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8009938:	e0bffc17 	ldw	r2,-16(fp)
 800993c:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
 8009940:	e0bffc17 	ldw	r2,-16(fp)
 8009944:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8009948:	00000606 	br	8009964 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800994c:	e0bffc17 	ldw	r2,-16(fp)
 8009950:	10800044 	addi	r2,r2,1
 8009954:	e0bffc15 	stw	r2,-16(fp)
 8009958:	e0bffc17 	ldw	r2,-16(fp)
 800995c:	10800810 	cmplti	r2,r2,32
 8009960:	103fe01e 	bne	r2,zero,80098e4 <_gp+0xffff7828>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8009964:	e0bffd17 	ldw	r2,-12(fp)
}
 8009968:	e6ffff04 	addi	sp,fp,-4
 800996c:	dfc00217 	ldw	ra,8(sp)
 8009970:	df000117 	ldw	fp,4(sp)
 8009974:	dc000017 	ldw	r16,0(sp)
 8009978:	dec00304 	addi	sp,sp,12
 800997c:	f800283a 	ret

08009980 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8009980:	defffe04 	addi	sp,sp,-8
 8009984:	df000115 	stw	fp,4(sp)
 8009988:	df000104 	addi	fp,sp,4
 800998c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8009990:	e0bfff17 	ldw	r2,-4(fp)
 8009994:	10bffe84 	addi	r2,r2,-6
 8009998:	10c00428 	cmpgeui	r3,r2,16
 800999c:	18001a1e 	bne	r3,zero,8009a08 <alt_exception_cause_generated_bad_addr+0x88>
 80099a0:	100690ba 	slli	r3,r2,2
 80099a4:	00820074 	movhi	r2,2049
 80099a8:	10a66e04 	addi	r2,r2,-26184
 80099ac:	1885883a 	add	r2,r3,r2
 80099b0:	10800017 	ldw	r2,0(r2)
 80099b4:	1000683a 	jmp	r2
 80099b8:	080099f8 	rdprs	zero,at,615
 80099bc:	080099f8 	rdprs	zero,at,615
 80099c0:	08009a08 	cmpgei	zero,at,616
 80099c4:	08009a08 	cmpgei	zero,at,616
 80099c8:	08009a08 	cmpgei	zero,at,616
 80099cc:	080099f8 	rdprs	zero,at,615
 80099d0:	08009a00 	call	8009a0 <__alt_mem_onchip_memory-0x7807660>
 80099d4:	08009a08 	cmpgei	zero,at,616
 80099d8:	080099f8 	rdprs	zero,at,615
 80099dc:	080099f8 	rdprs	zero,at,615
 80099e0:	08009a08 	cmpgei	zero,at,616
 80099e4:	080099f8 	rdprs	zero,at,615
 80099e8:	08009a00 	call	8009a0 <__alt_mem_onchip_memory-0x7807660>
 80099ec:	08009a08 	cmpgei	zero,at,616
 80099f0:	08009a08 	cmpgei	zero,at,616
 80099f4:	080099f8 	rdprs	zero,at,615
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80099f8:	00800044 	movi	r2,1
 80099fc:	00000306 	br	8009a0c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8009a00:	0005883a 	mov	r2,zero
 8009a04:	00000106 	br	8009a0c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8009a08:	0005883a 	mov	r2,zero
  }
}
 8009a0c:	e037883a 	mov	sp,fp
 8009a10:	df000017 	ldw	fp,0(sp)
 8009a14:	dec00104 	addi	sp,sp,4
 8009a18:	f800283a 	ret

08009a1c <atexit>:
 8009a1c:	200b883a 	mov	r5,r4
 8009a20:	000f883a 	mov	r7,zero
 8009a24:	000d883a 	mov	r6,zero
 8009a28:	0009883a 	mov	r4,zero
 8009a2c:	8009a801 	jmpi	8009a80 <__register_exitproc>

08009a30 <exit>:
 8009a30:	defffe04 	addi	sp,sp,-8
 8009a34:	000b883a 	mov	r5,zero
 8009a38:	dc000015 	stw	r16,0(sp)
 8009a3c:	dfc00115 	stw	ra,4(sp)
 8009a40:	2021883a 	mov	r16,r4
 8009a44:	8009bd80 	call	8009bd8 <__call_exitprocs>
 8009a48:	8009883a 	mov	r4,r16
 8009a4c:	8009d900 	call	8009d90 <_exit>

08009a50 <memcmp>:
 8009a50:	218d883a 	add	r6,r4,r6
 8009a54:	21800826 	beq	r4,r6,8009a78 <memcmp+0x28>
 8009a58:	20800003 	ldbu	r2,0(r4)
 8009a5c:	28c00003 	ldbu	r3,0(r5)
 8009a60:	10c00226 	beq	r2,r3,8009a6c <memcmp+0x1c>
 8009a64:	10c5c83a 	sub	r2,r2,r3
 8009a68:	f800283a 	ret
 8009a6c:	21000044 	addi	r4,r4,1
 8009a70:	29400044 	addi	r5,r5,1
 8009a74:	003ff706 	br	8009a54 <_gp+0xffff7998>
 8009a78:	0005883a 	mov	r2,zero
 8009a7c:	f800283a 	ret

08009a80 <__register_exitproc>:
 8009a80:	00820074 	movhi	r2,2049
 8009a84:	10a83004 	addi	r2,r2,-24384
 8009a88:	10c00017 	ldw	r3,0(r2)
 8009a8c:	defff904 	addi	sp,sp,-28
 8009a90:	dc000015 	stw	r16,0(sp)
 8009a94:	1c000c17 	ldw	r16,48(r3)
 8009a98:	dd400515 	stw	r21,20(sp)
 8009a9c:	dd000415 	stw	r20,16(sp)
 8009aa0:	dcc00315 	stw	r19,12(sp)
 8009aa4:	dc800215 	stw	r18,8(sp)
 8009aa8:	dc400115 	stw	r17,4(sp)
 8009aac:	dfc00615 	stw	ra,24(sp)
 8009ab0:	202b883a 	mov	r21,r4
 8009ab4:	2823883a 	mov	r17,r5
 8009ab8:	3027883a 	mov	r19,r6
 8009abc:	3825883a 	mov	r18,r7
 8009ac0:	1029883a 	mov	r20,r2
 8009ac4:	8000021e 	bne	r16,zero,8009ad0 <__register_exitproc+0x50>
 8009ac8:	1c000d04 	addi	r16,r3,52
 8009acc:	1c000c15 	stw	r16,48(r3)
 8009ad0:	80800117 	ldw	r2,4(r16)
 8009ad4:	00c007c4 	movi	r3,31
 8009ad8:	1880110e 	bge	r3,r2,8009b20 <__register_exitproc+0xa0>
 8009adc:	00800034 	movhi	r2,0
 8009ae0:	10800004 	addi	r2,r2,0
 8009ae4:	1000021e 	bne	r2,zero,8009af0 <__register_exitproc+0x70>
 8009ae8:	00bfffc4 	movi	r2,-1
 8009aec:	00003106 	br	8009bb4 <__register_exitproc+0x134>
 8009af0:	01002304 	movi	r4,140
 8009af4:	00000000 	call	0 <__alt_mem_onchip_memory-0x8008000>
 8009af8:	1021883a 	mov	r16,r2
 8009afc:	103ffa26 	beq	r2,zero,8009ae8 <_gp+0xffff7a2c>
 8009b00:	10000115 	stw	zero,4(r2)
 8009b04:	a0800017 	ldw	r2,0(r20)
 8009b08:	10c00c17 	ldw	r3,48(r2)
 8009b0c:	80c00015 	stw	r3,0(r16)
 8009b10:	14000c15 	stw	r16,48(r2)
 8009b14:	80002215 	stw	zero,136(r16)
 8009b18:	a8001d26 	beq	r21,zero,8009b90 <__register_exitproc+0x110>
 8009b1c:	00000606 	br	8009b38 <__register_exitproc+0xb8>
 8009b20:	a8001b26 	beq	r21,zero,8009b90 <__register_exitproc+0x110>
 8009b24:	80802217 	ldw	r2,136(r16)
 8009b28:	1000091e 	bne	r2,zero,8009b50 <__register_exitproc+0xd0>
 8009b2c:	00800034 	movhi	r2,0
 8009b30:	10800004 	addi	r2,r2,0
 8009b34:	103fec26 	beq	r2,zero,8009ae8 <_gp+0xffff7a2c>
 8009b38:	01004204 	movi	r4,264
 8009b3c:	00000000 	call	0 <__alt_mem_onchip_memory-0x8008000>
 8009b40:	103fe926 	beq	r2,zero,8009ae8 <_gp+0xffff7a2c>
 8009b44:	10004015 	stw	zero,256(r2)
 8009b48:	10004115 	stw	zero,260(r2)
 8009b4c:	80802215 	stw	r2,136(r16)
 8009b50:	81400117 	ldw	r5,4(r16)
 8009b54:	01000044 	movi	r4,1
 8009b58:	2947883a 	add	r3,r5,r5
 8009b5c:	18c7883a 	add	r3,r3,r3
 8009b60:	10c7883a 	add	r3,r2,r3
 8009b64:	1cc00015 	stw	r19,0(r3)
 8009b68:	2148983a 	sll	r4,r4,r5
 8009b6c:	11404017 	ldw	r5,256(r2)
 8009b70:	290ab03a 	or	r5,r5,r4
 8009b74:	11404015 	stw	r5,256(r2)
 8009b78:	1c802015 	stw	r18,128(r3)
 8009b7c:	00c00084 	movi	r3,2
 8009b80:	a8c0031e 	bne	r21,r3,8009b90 <__register_exitproc+0x110>
 8009b84:	10c04117 	ldw	r3,260(r2)
 8009b88:	1908b03a 	or	r4,r3,r4
 8009b8c:	11004115 	stw	r4,260(r2)
 8009b90:	80800117 	ldw	r2,4(r16)
 8009b94:	10c00044 	addi	r3,r2,1
 8009b98:	10800084 	addi	r2,r2,2
 8009b9c:	1085883a 	add	r2,r2,r2
 8009ba0:	1085883a 	add	r2,r2,r2
 8009ba4:	80c00115 	stw	r3,4(r16)
 8009ba8:	80a1883a 	add	r16,r16,r2
 8009bac:	84400015 	stw	r17,0(r16)
 8009bb0:	0005883a 	mov	r2,zero
 8009bb4:	dfc00617 	ldw	ra,24(sp)
 8009bb8:	dd400517 	ldw	r21,20(sp)
 8009bbc:	dd000417 	ldw	r20,16(sp)
 8009bc0:	dcc00317 	ldw	r19,12(sp)
 8009bc4:	dc800217 	ldw	r18,8(sp)
 8009bc8:	dc400117 	ldw	r17,4(sp)
 8009bcc:	dc000017 	ldw	r16,0(sp)
 8009bd0:	dec00704 	addi	sp,sp,28
 8009bd4:	f800283a 	ret

08009bd8 <__call_exitprocs>:
 8009bd8:	defff504 	addi	sp,sp,-44
 8009bdc:	dd000515 	stw	r20,20(sp)
 8009be0:	05020074 	movhi	r20,2049
 8009be4:	dc800315 	stw	r18,12(sp)
 8009be8:	dfc00a15 	stw	ra,40(sp)
 8009bec:	df000915 	stw	fp,36(sp)
 8009bf0:	ddc00815 	stw	r23,32(sp)
 8009bf4:	dd800715 	stw	r22,28(sp)
 8009bf8:	dd400615 	stw	r21,24(sp)
 8009bfc:	dcc00415 	stw	r19,16(sp)
 8009c00:	dc400215 	stw	r17,8(sp)
 8009c04:	dc000115 	stw	r16,4(sp)
 8009c08:	d9000015 	stw	r4,0(sp)
 8009c0c:	2825883a 	mov	r18,r5
 8009c10:	a5283004 	addi	r20,r20,-24384
 8009c14:	a4400017 	ldw	r17,0(r20)
 8009c18:	8cc00c17 	ldw	r19,48(r17)
 8009c1c:	8c400c04 	addi	r17,r17,48
 8009c20:	98004526 	beq	r19,zero,8009d38 <__call_exitprocs+0x160>
 8009c24:	9c000117 	ldw	r16,4(r19)
 8009c28:	00900034 	movhi	r2,16384
 8009c2c:	10bfffc4 	addi	r2,r2,-1
 8009c30:	9d402217 	ldw	r21,136(r19)
 8009c34:	85bfffc4 	addi	r22,r16,-1
 8009c38:	80a1883a 	add	r16,r16,r2
 8009c3c:	8421883a 	add	r16,r16,r16
 8009c40:	8421883a 	add	r16,r16,r16
 8009c44:	ac2f883a 	add	r23,r21,r16
 8009c48:	84000204 	addi	r16,r16,8
 8009c4c:	9c21883a 	add	r16,r19,r16
 8009c50:	b0002716 	blt	r22,zero,8009cf0 <__call_exitprocs+0x118>
 8009c54:	90000726 	beq	r18,zero,8009c74 <__call_exitprocs+0x9c>
 8009c58:	a800041e 	bne	r21,zero,8009c6c <__call_exitprocs+0x94>
 8009c5c:	b5bfffc4 	addi	r22,r22,-1
 8009c60:	bdffff04 	addi	r23,r23,-4
 8009c64:	843fff04 	addi	r16,r16,-4
 8009c68:	003ff906 	br	8009c50 <_gp+0xffff7b94>
 8009c6c:	b9002017 	ldw	r4,128(r23)
 8009c70:	913ffa1e 	bne	r18,r4,8009c5c <_gp+0xffff7ba0>
 8009c74:	99000117 	ldw	r4,4(r19)
 8009c78:	82000017 	ldw	r8,0(r16)
 8009c7c:	213fffc4 	addi	r4,r4,-1
 8009c80:	b100021e 	bne	r22,r4,8009c8c <__call_exitprocs+0xb4>
 8009c84:	9d800115 	stw	r22,4(r19)
 8009c88:	00000106 	br	8009c90 <__call_exitprocs+0xb8>
 8009c8c:	80000015 	stw	zero,0(r16)
 8009c90:	403ff226 	beq	r8,zero,8009c5c <_gp+0xffff7ba0>
 8009c94:	9f000117 	ldw	fp,4(r19)
 8009c98:	a8000526 	beq	r21,zero,8009cb0 <__call_exitprocs+0xd8>
 8009c9c:	00800044 	movi	r2,1
 8009ca0:	1592983a 	sll	r9,r2,r22
 8009ca4:	a9404017 	ldw	r5,256(r21)
 8009ca8:	494a703a 	and	r5,r9,r5
 8009cac:	2800021e 	bne	r5,zero,8009cb8 <__call_exitprocs+0xe0>
 8009cb0:	403ee83a 	callr	r8
 8009cb4:	00000906 	br	8009cdc <__call_exitprocs+0x104>
 8009cb8:	a9004117 	ldw	r4,260(r21)
 8009cbc:	4908703a 	and	r4,r9,r4
 8009cc0:	2000041e 	bne	r4,zero,8009cd4 <__call_exitprocs+0xfc>
 8009cc4:	b9400017 	ldw	r5,0(r23)
 8009cc8:	d9000017 	ldw	r4,0(sp)
 8009ccc:	403ee83a 	callr	r8
 8009cd0:	00000206 	br	8009cdc <__call_exitprocs+0x104>
 8009cd4:	b9000017 	ldw	r4,0(r23)
 8009cd8:	403ee83a 	callr	r8
 8009cdc:	99000117 	ldw	r4,4(r19)
 8009ce0:	e13fcc1e 	bne	fp,r4,8009c14 <_gp+0xffff7b58>
 8009ce4:	89000017 	ldw	r4,0(r17)
 8009ce8:	993fdc26 	beq	r19,r4,8009c5c <_gp+0xffff7ba0>
 8009cec:	003fc906 	br	8009c14 <_gp+0xffff7b58>
 8009cf0:	00800034 	movhi	r2,0
 8009cf4:	10800004 	addi	r2,r2,0
 8009cf8:	10000f26 	beq	r2,zero,8009d38 <__call_exitprocs+0x160>
 8009cfc:	99400117 	ldw	r5,4(r19)
 8009d00:	99000017 	ldw	r4,0(r19)
 8009d04:	2800091e 	bne	r5,zero,8009d2c <__call_exitprocs+0x154>
 8009d08:	20000826 	beq	r4,zero,8009d2c <__call_exitprocs+0x154>
 8009d0c:	89000015 	stw	r4,0(r17)
 8009d10:	a8000226 	beq	r21,zero,8009d1c <__call_exitprocs+0x144>
 8009d14:	a809883a 	mov	r4,r21
 8009d18:	00000000 	call	0 <__alt_mem_onchip_memory-0x8008000>
 8009d1c:	9809883a 	mov	r4,r19
 8009d20:	00000000 	call	0 <__alt_mem_onchip_memory-0x8008000>
 8009d24:	8cc00017 	ldw	r19,0(r17)
 8009d28:	003fbd06 	br	8009c20 <_gp+0xffff7b64>
 8009d2c:	9823883a 	mov	r17,r19
 8009d30:	2027883a 	mov	r19,r4
 8009d34:	003fba06 	br	8009c20 <_gp+0xffff7b64>
 8009d38:	dfc00a17 	ldw	ra,40(sp)
 8009d3c:	df000917 	ldw	fp,36(sp)
 8009d40:	ddc00817 	ldw	r23,32(sp)
 8009d44:	dd800717 	ldw	r22,28(sp)
 8009d48:	dd400617 	ldw	r21,24(sp)
 8009d4c:	dd000517 	ldw	r20,20(sp)
 8009d50:	dcc00417 	ldw	r19,16(sp)
 8009d54:	dc800317 	ldw	r18,12(sp)
 8009d58:	dc400217 	ldw	r17,8(sp)
 8009d5c:	dc000117 	ldw	r16,4(sp)
 8009d60:	dec00b04 	addi	sp,sp,44
 8009d64:	f800283a 	ret

08009d68 <__mulsi3>:
 8009d68:	0005883a 	mov	r2,zero
 8009d6c:	20000726 	beq	r4,zero,8009d8c <__mulsi3+0x24>
 8009d70:	20c0004c 	andi	r3,r4,1
 8009d74:	2008d07a 	srli	r4,r4,1
 8009d78:	18000126 	beq	r3,zero,8009d80 <__mulsi3+0x18>
 8009d7c:	1145883a 	add	r2,r2,r5
 8009d80:	294b883a 	add	r5,r5,r5
 8009d84:	203ffa1e 	bne	r4,zero,8009d70 <_gp+0xffff7cb4>
 8009d88:	f800283a 	ret
 8009d8c:	f800283a 	ret

08009d90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8009d90:	defffd04 	addi	sp,sp,-12
 8009d94:	df000215 	stw	fp,8(sp)
 8009d98:	df000204 	addi	fp,sp,8
 8009d9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8009da0:	0001883a 	nop
 8009da4:	e0bfff17 	ldw	r2,-4(fp)
 8009da8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8009dac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8009db0:	10000226 	beq	r2,zero,8009dbc <_exit+0x2c>
    ALT_SIM_FAIL();
 8009db4:	002af070 	cmpltui	zero,zero,43969
 8009db8:	00000106 	br	8009dc0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8009dbc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8009dc0:	003fff06 	br	8009dc0 <_gp+0xffff7d04>
